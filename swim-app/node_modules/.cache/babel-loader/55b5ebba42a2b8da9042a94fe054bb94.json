{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js\";\nimport React, { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\n\nclass Piechart extends Component {\n  // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n  render() {\n    /* Must use an interpolated color scale, which has a range of [0, 1] */\n    function interpolateColors(dataLength, colorScale, colorRangeInfo) {\n      let {\n        colorStart,\n        colorEnd\n      } = colorRangeInfo;\n      let colorRange = colorEnd - colorStart;\n      let intervalSize = colorRange / dataLength;\n      let i, colorPoint;\n      let colorArray = [];\n\n      for (i = 0; i < dataLength; i++) {\n        colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);\n        colorArray.push(colorScale(colorPoint));\n      }\n\n      return colorArray;\n    }\n\n    function calculatePoint(i, intervalSize, colorRangeInfo) {\n      var {\n        colorStart,\n        colorEnd,\n        useEndAsStart\n      } = colorRangeInfo;\n      return useEndAsStart ? colorEnd - i * intervalSize : colorStart + i * intervalSize;\n    }\n\n    function interpolator(t) {\n      return 0 * (1 - t) + 50 * t;\n    } // * If no data has been passed down from the form or invalid display empty form\n\n\n    if (this.props.meetData == null) {\n      let data;\n      data = {\n        datasets: [{\n          label: ''\n        }]\n      };\n    } else {\n      let data;\n      const dataLength = this.props.meetData.length;\n      const colorRangeInfo = {\n        colorStart: 0,\n        colorEnd: 1,\n        useEndAsStart: false\n      };\n      const colorScale = interpolator(this.props.meetData.length);\n      let colors = interpolateColors(dataLength, colorScale, colorRangeInfo);\n      console.log(colors);\n      data = {\n        labels: this.props.meetData.meetName,\n        datasets: [{\n          data: this.props.meetData.meetNumber,\n          backgroundColor: colors\n        }]\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }, \"Pie Example\"), /*#__PURE__*/React.createElement(Pie, {\n      data: data,\n      height: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Piechart;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js"],"names":["React","Component","Pie","Piechart","render","interpolateColors","dataLength","colorScale","colorRangeInfo","colorStart","colorEnd","colorRange","intervalSize","i","colorPoint","colorArray","calculatePoint","push","useEndAsStart","interpolator","t","props","meetData","data","datasets","label","length","colors","console","log","labels","meetName","meetNumber","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC7B;AAGAG,EAAAA,MAAM,GAAG;AAEL;AACA,aAASC,iBAAT,CAA2BC,UAA3B,EAAuCC,UAAvC,EAAmDC,cAAnD,EAAmE;AAC/D,UAAI;AAAEC,QAAAA,UAAF;AAAcC,QAAAA;AAAd,UAA2BF,cAA/B;AACA,UAAIG,UAAU,GAAGD,QAAQ,GAAGD,UAA5B;AACA,UAAIG,YAAY,GAAGD,UAAU,GAAGL,UAAhC;AACA,UAAIO,CAAJ,EAAOC,UAAP;AACA,UAAIC,UAAU,GAAG,EAAjB;;AAEA,WAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGP,UAAhB,EAA4BO,CAAC,EAA7B,EAAiC;AAC7BC,QAAAA,UAAU,GAAGE,cAAc,CAACH,CAAD,EAAID,YAAJ,EAAkBJ,cAAlB,CAA3B;AACAO,QAAAA,UAAU,CAACE,IAAX,CAAgBV,UAAU,CAACO,UAAD,CAA1B;AACH;;AACD,aAAOC,UAAP;AACH;;AAED,aAASC,cAAT,CAAwBH,CAAxB,EAA2BD,YAA3B,EAAyCJ,cAAzC,EAAyD;AACrD,UAAI;AAAEC,QAAAA,UAAF;AAAcC,QAAAA,QAAd;AAAwBQ,QAAAA;AAAxB,UAA0CV,cAA9C;AACA,aAAQU,aAAa,GACdR,QAAQ,GAAIG,CAAC,GAAGD,YADF,GAEdH,UAAU,GAAII,CAAC,GAAGD,YAFzB;AAGH;;AAED,aAASO,YAAT,CAAsBC,CAAtB,EAAyB;AACrB,aAAO,KAAK,IAAIA,CAAT,IAAc,KAAKA,CAA1B;AACH,KA1BI,CA4BL;;;AACA,QAAI,KAAKC,KAAL,CAAWC,QAAX,IAAuB,IAA3B,EAAiC;AAC7B,UAAIC,IAAJ;AACAA,MAAAA,IAAI,GAAG;AACHC,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,KAAK,EAAE;AADX,SADM;AADP,OAAP;AAOH,KATD,MASO;AACH,UAAIF,IAAJ;AACA,YAAMjB,UAAU,GAAG,KAAKe,KAAL,CAAWC,QAAX,CAAoBI,MAAvC;AACA,YAAMlB,cAAc,GAAG;AACnBC,QAAAA,UAAU,EAAE,CADO;AAEnBC,QAAAA,QAAQ,EAAE,CAFS;AAGnBQ,QAAAA,aAAa,EAAE;AAHI,OAAvB;AAKA,YAAMX,UAAU,GAAGY,YAAY,CAAC,KAAKE,KAAL,CAAWC,QAAX,CAAoBI,MAArB,CAA/B;AACA,UAAIC,MAAM,GAAGtB,iBAAiB,CAACC,UAAD,EAAaC,UAAb,EAAyBC,cAAzB,CAA9B;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAJ,MAAAA,IAAI,GAAG;AACHO,QAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWC,QAAX,CAAoBS,QADzB;AAEHP,QAAAA,QAAQ,EAAE,CAAC;AACPD,UAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWC,QAAX,CAAoBU,UADnB;AAEPC,UAAAA,eAAe,EAAEN;AAFV,SAAD;AAFP,OAAP;AAQH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAEJ,IAAX;AAAiB,MAAA,MAAM,EAAE,GAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAOH;;AAtE4B;;AAwEjC,eAAepB,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2'\n\nclass Piechart extends Component {\n    // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n\n\n    render() {\n\n        /* Must use an interpolated color scale, which has a range of [0, 1] */\n        function interpolateColors(dataLength, colorScale, colorRangeInfo) {\n            let { colorStart, colorEnd } = colorRangeInfo;\n            let colorRange = colorEnd - colorStart;\n            let intervalSize = colorRange / dataLength;\n            let i, colorPoint;\n            let colorArray = [];\n\n            for (i = 0; i < dataLength; i++) {\n                colorPoint = calculatePoint(i, intervalSize, colorRangeInfo);\n                colorArray.push(colorScale(colorPoint));\n            }\n            return colorArray;\n        }\n\n        function calculatePoint(i, intervalSize, colorRangeInfo) {\n            var { colorStart, colorEnd, useEndAsStart } = colorRangeInfo;\n            return (useEndAsStart\n                ? (colorEnd - (i * intervalSize))\n                : (colorStart + (i * intervalSize)));\n        }\n\n        function interpolator(t) {\n            return 0 * (1 - t) + 50 * t;\n        }\n\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.meetData == null) {\n            let data;\n            data = {\n                datasets: [\n                    {\n                        label: ''\n                    }\n                ]\n            }\n        } else {\n            let data;\n            const dataLength = this.props.meetData.length;\n            const colorRangeInfo = {\n                colorStart: 0,\n                colorEnd: 1,\n                useEndAsStart: false,\n            };\n            const colorScale = interpolator(this.props.meetData.length);\n            let colors = interpolateColors(dataLength, colorScale, colorRangeInfo);\n            console.log(colors)\n            data = {\n                labels: this.props.meetData.meetName,\n                datasets: [{\n                    data: this.props.meetData.meetNumber,\n                    backgroundColor: colors\n                }],\n\n            }\n        }\n\n        return (\n            <div>\n                <h2>Pie Example</h2>\n                <Pie data={data} height={100} />\n\n            </div>\n        )\n    }\n}\nexport default Piechart;"]},"metadata":{},"sourceType":"module"}