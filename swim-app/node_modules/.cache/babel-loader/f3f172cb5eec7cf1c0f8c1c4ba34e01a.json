{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Pie } from 'react-chartjs-2';\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Dashboard extends Component {\n  render() {\n    let data;\n    let options; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.swimmerData == null) {\n      data = {\n        datasets: [{\n          label: ''\n        }]\n      };\n    } else {\n      swimData = {\n        labels: this.props.swimmerData.rank,\n        datasets: [{\n          label: this.props.swimEvent,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: this.props.swimmerData.time\n        }]\n      };\n      options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 0 // general animation time\n\n        },\n        onClick: function (event, item) {\n          // * Error handling is needed for if a point is not clicked but within the canvas\n          if (!(item.length === 0)) {\n            let index = item[0]._index; // * Resets the point that was clicked prior back to original colour\n\n            for (let i = 0; i < item[0]._chart.config.data.datasets[0].data.length; i++) {\n              item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][i] = 'rgb(255, 99, 132)';\n            } // * Sets the point clicked colour to highlighted color\n\n\n            item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][index] = 'white';\n            this.update();\n          }\n        },\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time \n            label: (tooltipItem, data) => {\n              // * Label Array is used to create multiple labels inside of data element in graph. \n              let labelArr = [];\n              labelArr.push(this.props.swimmerData.athletes[tooltipItem.label - 1] + ' ' + new Date(tooltipItem.yLabel).toISOString().substr(14, 8));\n              return labelArr;\n            }\n          }\n        },\n        scales: {\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Times (Seconds)\"\n            },\n            ticks: {\n              callback: function (v) {\n                //* Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                return new Date(v).toISOString().substr(14, 8);\n              }\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Rank\"\n            }\n          }]\n        }\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, \"Canadian Swimming Rankings\"), /*#__PURE__*/React.createElement(\"div\", {\n      name: \"DashboardforChart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/dashboard/dashboard.js"],"names":["React","Component","Line","Pie","Dashboard","render","data","options","props","swimmerData","datasets","label","swimData","labels","rank","swimEvent","backgroundColor","pointBackgroundColor","borderColor","fill","time","responsive","maintainAspectRatio","animation","duration","onClick","event","item","length","index","_index","i","_chart","config","update","tooltips","callbacks","tooltipItem","labelArr","push","athletes","Date","yLabel","toISOString","substr","scales","yAxes","scaleLabel","display","labelString","ticks","callback","v","xAxes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Pie } from 'react-chartjs-2';\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n\n\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Dashboard extends Component {\n    render() {\n        let data;\n        let options;\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.swimmerData == null) {\n            data = {\n                datasets: [\n                    {\n                        label: ''\n                    }\n                ]\n            }\n        } else {\n            swimData = {\n                labels: this.props.swimmerData.rank,\n                datasets: [{\n                    label: this.props.swimEvent,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: this.props.swimmerData.time,\n                }]\n            }\n\n            options = {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: {\n                    duration: 0 // general animation time\n                },\n                onClick: function (event, item) {\n                    // * Error handling is needed for if a point is not clicked but within the canvas\n                    if (!(item.length === 0)) {\n                        let index = item[0]._index;\n                        // * Resets the point that was clicked prior back to original colour\n                        for (let i = 0; i < item[0]._chart.config.data.datasets[0].data.length; i++) {\n                            item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][i] = 'rgb(255, 99, 132)';\n                        }\n                        // * Sets the point clicked colour to highlighted color\n                        item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][index] = 'white';\n                        this.update();\n                    }\n                },\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time \n                        label: (tooltipItem, data) => {\n                            // * Label Array is used to create multiple labels inside of data element in graph. \n                            let labelArr = [];\n                            labelArr.push(this.props.swimmerData.athletes[tooltipItem.label - 1] + ' ' + new Date(tooltipItem.yLabel).toISOString().substr(14, 8));\n                            return labelArr;\n                        }\n                    }\n                },\n                scales: {\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Times (Seconds)\",\n                        },\n                        ticks: {\n                            callback: function (v) {\n                                //* Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                                return new Date(v).toISOString().substr(14, 8)\n                            }\n                        }\n                    }],\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Rank\",\n                        }\n                    }]\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"App\">Canadian Swimming Rankings</div>\n                <div name=\"DashboardforChart\">\n                    {/*   <Line data={swimData} options={options} height={400}> </Line>   */}\n                </div>\n            </div >\n        )\n    }\n}\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}