{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js\";\nimport React, { Component } from 'react';\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Line } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n  render() {\n    if (this.props.swimmerData == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        name: \"PeakMonth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      let allData = this.props.swimmerData;\n      let data = []; // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n\n      allData.forEach(Workbook => {\n        // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n        let index = EVENTS.indexOf(this.props.event);\n        let Sheet = Workbook[0][index]; // * For the selected event collect all the swimmer data\n\n        Sheet.forEach(swimmer => {\n          data.push(swimmer);\n        });\n      });\n      let meets = Array.from(SwimAnalytics.mostOccurences(SwimAnalytics.meetMonth(data))).sort((a, b) => a[1] - b[1]);\n      let meetDates = [];\n      let meetOccurences = [];\n      meets.forEach((value, key) => {\n        meetDates.push(key);\n        meetOccurences.push(value);\n      });\n      console.log(meetOccurences); // * Data that will be passed to the Linegraph Component\n\n      data = {\n        labels: meetDates,\n        datasets: [{\n          label: this.props.swimEvent,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: meetOccurences\n        }]\n      }; //console.log(SwimAnalytics.mostOccurences(data));\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Line, {\n        data: data,\n        height: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nexport default PeakMonth;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js"],"names":["React","Component","EVENTS","SwimAnalytics","Line","PeakMonth","render","props","swimmerData","allData","data","forEach","Workbook","index","indexOf","event","Sheet","swimmer","push","meets","Array","from","mostOccurences","meetMonth","sort","a","b","meetDates","meetOccurences","value","key","console","log","labels","datasets","label","swimEvent","backgroundColor","pointBackgroundColor","borderColor","fill"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,OAAO,KAAKC,aAAZ,MAA+B,6CAA/B;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAC9BK,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKC,KAAL,CAAWC,WAAX,IAA0B,IAA9B,EAAoC;AAChC,0BACI;AAAK,QAAA,IAAI,EAAC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAGH,KAJD,MAIO;AAEH,UAAIC,OAAO,GAAG,KAAKF,KAAL,CAAWC,WAAzB;AACA,UAAIE,IAAI,GAAG,EAAX,CAHG,CAKH;;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgBC,QAAQ,IAAI;AACxB;AACA,YAAIC,KAAK,GAAGX,MAAM,CAACY,OAAP,CAAe,KAAKP,KAAL,CAAWQ,KAA1B,CAAZ;AACA,YAAIC,KAAK,GAAGJ,QAAQ,CAAC,CAAD,CAAR,CAAYC,KAAZ,CAAZ,CAHwB,CAIxB;;AACAG,QAAAA,KAAK,CAACL,OAAN,CAAcM,OAAO,IAAI;AACrBP,UAAAA,IAAI,CAACQ,IAAL,CAAUD,OAAV;AACH,SAFD;AAGH,OARD;AAUA,UAAIE,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAWlB,aAAa,CAACmB,cAAd,CAA6BnB,aAAa,CAACoB,SAAd,CAAwBb,IAAxB,CAA7B,CAAX,EAAwEc,IAAxE,CAA6E,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAA/F,CAAZ;AACA,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,cAAc,GAAG,EAArB;AACAT,MAAAA,KAAK,CAACR,OAAN,CAAc,CAACkB,KAAD,EAAQC,GAAR,KAAgB;AAC1BH,QAAAA,SAAS,CAACT,IAAV,CAAeY,GAAf;AACAF,QAAAA,cAAc,CAACV,IAAf,CAAoBW,KAApB;AACH,OAHD;AAKAE,MAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ,EAxBG,CAyBH;;AACAlB,MAAAA,IAAI,GAAG;AACHuB,QAAAA,MAAM,EAAEN,SADL;AAEHO,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,KAAK5B,KAAL,CAAW6B,SADX;AAEPC,UAAAA,eAAe,EAAE,mBAFV;AAGPC,UAAAA,oBAAoB,EAAE,CAAC,mBAAD,CAHf;AAIPC,UAAAA,WAAW,EAAE,mBAJN;AAKPC,UAAAA,IAAI,EAAE,KALC;AAMP9B,UAAAA,IAAI,EAAEkB;AANC,SAAD;AAFP,OAAP,CA1BG,CAsCH;;AACA,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAElB,IAAZ;AAAkB,QAAA,MAAM,EAAE,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAKH;AACJ;;AAnD6B;;AAqDlC,eAAeL,SAAf","sourcesContent":["import React, { Component } from 'react'\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Line } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n    render() {\n        if (this.props.swimmerData == null) {\n            return (\n                <div name=\"PeakMonth\"> </div>\n            )\n        } else {\n\n            let allData = this.props.swimmerData;\n            let data = [];\n\n            // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n            allData.forEach(Workbook => {\n                // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n                let index = EVENTS.indexOf(this.props.event)\n                let Sheet = Workbook[0][index];\n                // * For the selected event collect all the swimmer data\n                Sheet.forEach(swimmer => {\n                    data.push(swimmer);\n                })\n            })\n\n            let meets = Array.from(SwimAnalytics.mostOccurences(SwimAnalytics.meetMonth(data))).sort((a, b) => a[1] - b[1]);\n            let meetDates = []\n            let meetOccurences = [];\n            meets.forEach((value, key) => {\n                meetDates.push(key);\n                meetOccurences.push(value)\n            })\n\n            console.log(meetOccurences)\n            // * Data that will be passed to the Linegraph Component\n            data = {\n                labels: meetDates,\n                datasets: [{\n                    label: this.props.swimEvent,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: meetOccurences,\n                }]\n            }\n\n            //console.log(SwimAnalytics.mostOccurences(data));\n            return (\n                <div>\n                    <Line data={data} height={100} />\n                </div>\n            )\n        }\n    }\n}\nexport default PeakMonth;"]},"metadata":{},"sourceType":"module"}