{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js\";\nimport React, { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nclass Piechart extends Component {\n  // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n  render() {\n    let data;\n    let options;\n    let average;\n    let median;\n    let mode;\n    let times;\n    let meets;\n    let meetData;\n    let meetName;\n    let meetNumber;\n    let meetDate; // * If no data has been passed down from the form or invalid display empty form\n    // TODO MIGHT NEED TO ADD A CONSTRUCTOR AND TRACK STATE SO THAT IT IS NOT DUBBLING UP ON CALCULATION SUCH AS MOST OCCURENCES. ADDED OVERHEAD\n\n    if (this.props.meetData === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      console.log(this.props.meetData); // * Ensures that all time strings given are in an appropriate ISO String format\n\n      const standardize_times = time => {\n        if (time.length === 5) time = '00:' + time;\n        if (time.length === 7) time = '0' + time;\n        let milli = parseInt(time.split(':')[0] * 60000) + parseInt(time.split(':')[1].split('.')[0] * 1000) + parseInt(time.split('.')[1]) * 10;\n        return milli;\n      }; // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n\n\n      const mostOccurences = list => {\n        let map = new Map();\n\n        while (list.length !== 0) {\n          if (!map.has(list[0])) {\n            map.set(list[0], 1);\n          } else {\n            map.set(list[0], map.get(list[0]) + 1);\n          }\n\n          list.shift();\n        }\n\n        return map;\n      }; // * Average and Median Times\n\n\n      const averageTime = time => {\n        try {\n          let average = time.reduce((a, b) => a + b);\n          return new Date(average / time.length).toISOString().substr(14, 8);\n        } catch {\n          console.log('Error: Empty Data Array');\n        }\n      };\n\n      const medianTime = time => {\n        try {\n          let index = Math.floor(time.length / 2);\n          let median; // * If the length % 2 === 0 (aka even number)\n\n          if (time.length % 2 === 0 && time.length !== 0) {\n            // * Minus one is needed for correct array index of even number centre points\n            median = (time[index - 1] + time[index]) / 2;\n          } else if (time.length % 2 === 1) {\n            median = time[index];\n          }\n\n          return new Date(median).toISOString().substr(14, 8);\n        } catch {\n          console.log('Error: Empty Data Array');\n        }\n      };\n\n      const modeTime = time => {\n        try {\n          // * Times is given in Milliseconds, and from lowest to highest. We will convert to seconds and round down to standardize mode to seconds\n          let toModeSeconds = time.map(el => Math.floor(el / 1000));\n          let modeOccurence = mostOccurences(toModeSeconds); // * Iterates through the map and finds the most occuring time\n\n          let mostCommonNumber = NaN;\n          let maxCount = -1;\n\n          for (let [num, count] of modeOccurence.entries()) {\n            if (count > maxCount) {\n              maxCount = count;\n              mostCommonNumber = num;\n            }\n          }\n\n          return {\n            mostCommonNumber,\n            maxCount\n          };\n        } catch {\n          console.log('Error: Empty Data Array');\n        }\n      };\n\n      times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n      meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n      meetData = mostOccurences(meets);\n      meetName = Array.from(meetData.keys());\n      meetNumber = Array.from(meetData.values());\n      average = averageTime(times);\n      median = medianTime(times);\n      mode = modeTime(times); // * Converts Excel Date Value into a JS date inorder to be graphed\n      // TODO NEED TO ADD STATE TRACKING TO THAT DATA SO IT DOESN'T RE RENDER EVERY CHART CLICK\n\n      meetDate = this.props.meetData.map(date => new Date(Math.floor(date.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth());\n      data = {\n        labels: meetName,\n        datasets: [{\n          data: meetNumber,\n          backgroundColor: ['red', 'yellow']\n        }]\n      };\n      options = {\n        legend: {\n          display: false\n        }\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"style\", {\n      type: \"text/css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, `\n                    .analytics{\n                        height:auto;\n                        border-radius: 20px;\n                        padding-left: 1rem;\n                    } \n                    .modeCount{\n                        font-size: 0.8rem;\n                    }\n                `)), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pt-0 analytics justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"colBorder m-1\",\n      lg: 12,\n      md: 5,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"formTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, \"Swimming Analytics\"), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"averageTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 52\n      }\n    }, \"Average Time \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 73\n      }\n    }), average), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"medianTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 50\n      }\n    }, \"Median Time\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 69\n      }\n    }), median), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"modeTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 49\n      }\n    }, \"Most Common Time Range \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 80\n      }\n    }), this.props.meetData.length === 0 ? '' : new Date(mode.mostCommonNumber * 1000).toISOString().substr(14, 8) + '-' + new Date((mode.mostCommonNumber + 1) * 1000).toISOString().substr(14, 8), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 223\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"modeCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 33\n      }\n    }, \"  With \", mode.maxCount, \" Swimmers  \")), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      className: \"colBorder m-1\",\n      lg: 12,\n      md: 5,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \" formTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, \"Fastest Meets\"), /*#__PURE__*/React.createElement(Pie, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default Piechart;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js"],"names":["React","Component","Pie","Container","Col","Row","Piechart","render","data","options","average","median","mode","times","meets","meetData","meetName","meetNumber","meetDate","props","console","log","standardize_times","time","length","milli","parseInt","split","mostOccurences","list","map","Map","has","set","get","shift","averageTime","reduce","a","b","Date","toISOString","substr","medianTime","index","Math","floor","modeTime","toModeSeconds","el","modeOccurence","mostCommonNumber","NaN","maxCount","num","count","entries","__EMPTY_7","meet","__EMPTY_12","Array","from","keys","values","date","__EMPTY_10","getMonth","labels","datasets","backgroundColor","legend","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2'\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nclass Piechart extends Component {\n    // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n    render() {\n        let data;\n        let options;\n        let average;\n        let median;\n        let mode;\n        let times;\n        let meets;\n        let meetData;\n        let meetName;\n        let meetNumber;\n        let meetDate;\n\n\n        // * If no data has been passed down from the form or invalid display empty form\n        // TODO MIGHT NEED TO ADD A CONSTRUCTOR AND TRACK STATE SO THAT IT IS NOT DUBBLING UP ON CALCULATION SUCH AS MOST OCCURENCES. ADDED OVERHEAD\n        if (this.props.meetData === null) {\n            return (\n                <div> </div>\n            )\n        } else {\n            console.log(this.props.meetData)\n            // * Ensures that all time strings given are in an appropriate ISO String format\n            const standardize_times = (time) => {\n\n                if (time.length === 5) time = '00:' + time;\n                if (time.length === 7) time = '0' + time;\n                let milli = ((parseInt(time.split(':')[0] * 60000)) + (parseInt(time.split(':')[1].split('.')[0] * 1000)) + (parseInt(time.split('.')[1]) * 10));\n                return milli;\n            }\n\n            // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n            const mostOccurences = (list) => {\n                let map = new Map();\n                while (list.length !== 0) {\n                    if (!map.has(list[0])) {\n                        map.set(list[0], 1);\n                    } else {\n                        map.set(list[0], map.get(list[0]) + 1);\n                    }\n                    list.shift();\n                }\n                return map;\n            }\n\n            // * Average and Median Times\n            const averageTime = (time) => {\n                try {\n                    let average = time.reduce((a, b) => a + b);\n                    return new Date(average / time.length).toISOString().substr(14, 8);\n                }\n                catch {\n                    console.log('Error: Empty Data Array')\n                }\n            }\n\n            const medianTime = (time) => {\n                try {\n                    let index = Math.floor(time.length / 2);\n                    let median;\n                    // * If the length % 2 === 0 (aka even number)\n                    if (time.length % 2 === 0 && time.length !== 0) {\n                        // * Minus one is needed for correct array index of even number centre points\n                        median = (time[index - 1] + time[index]) / 2;\n                    } else if (time.length % 2 === 1) {\n                        median = time[index];\n                    }\n                    return new Date(median).toISOString().substr(14, 8)\n                } catch {\n                    console.log('Error: Empty Data Array')\n                }\n            }\n\n\n            const modeTime = (time) => {\n                try {\n                    // * Times is given in Milliseconds, and from lowest to highest. We will convert to seconds and round down to standardize mode to seconds\n                    let toModeSeconds = time.map(el => Math.floor(el / 1000));\n                    let modeOccurence = mostOccurences(toModeSeconds);\n\n                    // * Iterates through the map and finds the most occuring time\n                    let mostCommonNumber = NaN\n                    let maxCount = -1\n                    for (let [num, count] of modeOccurence.entries()) {\n                        if (count > maxCount) {\n                            maxCount = count\n                            mostCommonNumber = num\n                        }\n                    }\n                    return { mostCommonNumber, maxCount };\n                } catch {\n                    console.log('Error: Empty Data Array')\n                }\n            }\n\n            times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n            meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n\n            meetData = mostOccurences(meets);\n            meetName = Array.from(meetData.keys());\n            meetNumber = Array.from(meetData.values());\n\n            average = averageTime(times);\n            median = medianTime(times);\n            mode = modeTime(times);\n\n            // * Converts Excel Date Value into a JS date inorder to be graphed\n            // TODO NEED TO ADD STATE TRACKING TO THAT DATA SO IT DOESN'T RE RENDER EVERY CHART CLICK\n            meetDate = this.props.meetData.map(date => new Date(Math.floor(date.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth());\n\n\n\n            data = {\n                labels: meetName,\n                datasets: [{\n                    data: meetNumber,\n                    backgroundColor: ['red', 'yellow']\n                }]\n            }\n            options = {\n                legend: {\n                    display: false\n                }\n            }\n\n\n\n        }\n\n        return (\n            <div>\n                <>\n                    <style type='text/css'>\n                        {`\n                    .analytics{\n                        height:auto;\n                        border-radius: 20px;\n                        padding-left: 1rem;\n                    } \n                    .modeCount{\n                        font-size: 0.8rem;\n                    }\n                `}\n                    </style>\n                </>\n\n\n                {/* Time Analytics */}\n                <Container>\n                    <Row className='pt-0 analytics justify-content-md-center'>\n                        <Col className='colBorder m-1' lg={12} md={5} xs={12}>\n\n                            <h4 className='formTitle'>Swimming Analytics</h4>\n                            {/* Average, Median Times, Mode Times */}\n                            <p name='averageTime'> <b>Average Time </b> <br></br>\n                                {average}\n                            </p>\n\n                            <p name='medianTime'><b>Median Time</b> <br></br>\n                                {median}\n                            </p>\n\n                            <p name='modeTime'> <b>Most Common Time Range </b> <br></br>\n                                {this.props.meetData.length === 0 ? '' : new Date(mode.mostCommonNumber * 1000).toISOString().substr(14, 8) + '-' + new Date((mode.mostCommonNumber + 1) * 1000).toISOString().substr(14, 8)} <br></br>\n                                <b className='modeCount'>  With {mode.maxCount} Swimmers  </b>\n                            </p>\n\n                            <p name=''>\n\n                            </p>\n\n                        </Col>\n\n                        {/* * Fastest Meets */}\n                        <Col className='colBorder m-1' lg={12} md={5} xs={12}>\n                            <h4 className=' formTitle'>Fastest Meets</h4>\n                            <Pie data={data} options={options} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div >\n        )\n    }\n}\nexport default Piechart;"]},"metadata":{},"sourceType":"module"}