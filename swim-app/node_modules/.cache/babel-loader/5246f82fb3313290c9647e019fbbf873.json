{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/linegraph/linegraph.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Linegraph extends Component {\n  render() {\n    let data;\n    let options; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.swimmerData == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        name: \"DashboardforChart\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      // * Converting the JSON To working usable data to graph (Shifts and pop are for removing the default row)\n      let athletes = this.props.swimmerData.map(athlete => athlete.__EMPTY_3);\n      let rank = this.props.swimmerData.map(rank => rank.__EMPTY_9).reverse(); // * Since Swim Times can Range from under a minute up to 20 mins we will standardize the times to all have the same length \n      // * In the following format MM:SS:ss\n\n      const standardize_times = time => {\n        // * Ensures that all time strings given are in an appropriate ISO String format\n        if (time.length === 5) time = '00:' + time;\n        if (time.length === 7) time = '0' + time;\n        let milli = parseInt(time.split(':')[0] * 60000) + parseInt(time.split(':')[1].split('.')[0] * 1000) + parseInt(time.split('.')[1]) * 10;\n        return milli;\n      };\n\n      let time = this.props.swimmerData.map(time => standardize_times(time.__EMPTY_7)).reverse(); // * Data that will be passed to the Linegraph Component\n\n      data = {\n        labels: rank,\n        datasets: [{\n          label: this.props.swimEvent,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: time\n        }]\n      };\n      options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 0 // general animation time\n\n        },\n        onClick: function (event, item) {\n          // * Error handling is needed for if a point is not clicked but within the canvas\n          if (!(item.length === 0)) {\n            let index = item[0]._index; // * Resets the point that was clicked prior back to original colour\n\n            for (let i = 0; i < item[0]._chart.config.data.datasets[0].data.length; i++) {\n              item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][i] = 'rgb(255, 99, 132)';\n            } // * Sets the point clicked colour to highlighted color\n\n\n            item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][index] = 'white';\n            /*                     \n                                  TODO Need to go back and get the functionality and logic more polished for scrolling to and highlight the correct points        \n                                   // * 49 - Index is needed since the datasets index's are reversed to graph, + 1 is for correct place (1st, 2nd, ...)\n                                  document.getElementsByTagName('table')[0].style.backgroundColor = 'none';\n                                  document.getElementsByTagName('tr').namedItem((49 - index) + 1).style.backgroundColor = 'yellow';\n            */\n\n            this.update();\n          }\n        },\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time \n            label: (tooltipItem, data) => {\n              // * Label Array is used to create multiple labels inside of data element in graph. \n              let labelArr = [];\n              labelArr.push(athletes[tooltipItem.label - 1] + ' ' + new Date(tooltipItem.yLabel).toISOString().substr(14, 8));\n              return labelArr;\n            }\n          }\n        },\n        scales: {\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Times (Seconds)\"\n            },\n            ticks: {\n              callback: function (v) {\n                //* Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                return new Date(v).toISOString().substr(14, 8);\n              }\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Rank\"\n            }\n          }]\n        }\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \"Canadian Swimming Rankings\"), /*#__PURE__*/React.createElement(\"div\", {\n      name: \"DashboardforChart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      options: options,\n      height: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, \" \")));\n  }\n\n}\n\nexport default Linegraph;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/linegraph/linegraph.js"],"names":["React","Component","Line","Linegraph","render","data","options","props","swimmerData","athletes","map","athlete","__EMPTY_3","rank","__EMPTY_9","reverse","standardize_times","time","length","milli","parseInt","split","__EMPTY_7","labels","datasets","label","swimEvent","backgroundColor","pointBackgroundColor","borderColor","fill","responsive","maintainAspectRatio","animation","duration","onClick","event","item","index","_index","i","_chart","config","update","tooltips","callbacks","tooltipItem","labelArr","push","Date","yLabel","toISOString","substr","scales","yAxes","scaleLabel","display","labelString","ticks","callback","v","xAxes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n\n\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Linegraph extends Component {\n    render() {\n        let data;\n        let options;\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.swimmerData == null) {\n            return (\n                <div name=\"DashboardforChart\"> </div>\n            )\n        } else {\n\n            // * Converting the JSON To working usable data to graph (Shifts and pop are for removing the default row)\n            let athletes = this.props.swimmerData.map(athlete => athlete.__EMPTY_3);\n            let rank = this.props.swimmerData.map(rank => rank.__EMPTY_9).reverse();\n\n            // * Since Swim Times can Range from under a minute up to 20 mins we will standardize the times to all have the same length \n            // * In the following format MM:SS:ss\n            const standardize_times = (time) => {\n                // * Ensures that all time strings given are in an appropriate ISO String format\n                if (time.length === 5) time = '00:' + time;\n                if (time.length === 7) time = '0' + time;\n                let milli = ((parseInt(time.split(':')[0] * 60000)) + (parseInt(time.split(':')[1].split('.')[0] * 1000)) + (parseInt(time.split('.')[1]) * 10));\n                return milli;\n            }\n\n            let time = this.props.swimmerData.map(time => standardize_times(time.__EMPTY_7)).reverse();\n\n            // * Data that will be passed to the Linegraph Component\n            data = {\n                labels: rank,\n                datasets: [{\n                    label: this.props.swimEvent,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: time,\n                }]\n            }\n\n            options = {\n                responsive: true,\n                maintainAspectRatio: false,\n                animation: {\n                    duration: 0 // general animation time\n                },\n                onClick: function (event, item) {\n                    // * Error handling is needed for if a point is not clicked but within the canvas\n                    if (!(item.length === 0)) {\n                        let index = item[0]._index;\n                        // * Resets the point that was clicked prior back to original colour\n                        for (let i = 0; i < item[0]._chart.config.data.datasets[0].data.length; i++) {\n                            item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][i] = 'rgb(255, 99, 132)';\n                        }\n                        // * Sets the point clicked colour to highlighted color\n                        item[0]._chart.config.data.datasets[0]['pointBackgroundColor'][index] = 'white';\n\n                        /*                     \n                                              TODO Need to go back and get the functionality and logic more polished for scrolling to and highlight the correct points        \n                                               // * 49 - Index is needed since the datasets index's are reversed to graph, + 1 is for correct place (1st, 2nd, ...)\n                                              document.getElementsByTagName('table')[0].style.backgroundColor = 'none';\n                                              document.getElementsByTagName('tr').namedItem((49 - index) + 1).style.backgroundColor = 'yellow';\n                       */\n                        this.update();\n                    }\n                },\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time \n                        label: (tooltipItem, data) => {\n                            // * Label Array is used to create multiple labels inside of data element in graph. \n                            let labelArr = [];\n                            labelArr.push(athletes[tooltipItem.label - 1] + ' ' + new Date(tooltipItem.yLabel).toISOString().substr(14, 8));\n                            return labelArr;\n                        }\n                    }\n                },\n                scales: {\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Times (Seconds)\",\n                        },\n                        ticks: {\n                            callback: function (v) {\n                                //* Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                                return new Date(v).toISOString().substr(14, 8)\n                            }\n                        }\n                    }],\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Rank\",\n                        }\n                    }]\n                }\n            }\n        }\n\n        return (\n            <div>\n                <div className=\"App\">Canadian Swimming Rankings</div>\n                <div name=\"DashboardforChart\">\n                    <Line data={data} options={options} height={400}> </Line>\n                </div>\n            </div >\n        )\n    }\n}\nexport default Linegraph;"]},"metadata":{},"sourceType":"module"}