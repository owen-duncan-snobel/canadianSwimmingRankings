{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js\";\nimport React, { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\n\nclass Piechart extends Component {\n  // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n  render() {\n    let data;\n    let average;\n    let median; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.meetData === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      // * For Pie Chart Graphing\n      let meets = this.props.meetData.map(meet => meet.__EMPTY_12); // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n\n      const mostMeetOccurences = list => {\n        let map = new Map();\n\n        while (list.length !== 0) {\n          if (!map.has(list[0])) {\n            map.set(list[0], 1);\n          } else {\n            map.set(list[0], map.get(list[0]) + 1);\n          }\n\n          list.shift();\n        }\n\n        let meetName = Array.from(map.keys());\n        let meetNumber = Array.from(map.values());\n        return {\n          meetName,\n          meetNumber\n        };\n      };\n\n      let meetData = mostMeetOccurences(meets);\n      let meetName = meetData.meetName;\n      let meetNumber = meetData.meetNumber;\n      data = {\n        labels: meetName,\n        datasets: [{\n          data: meetNumber,\n          backgroundColor: ['red', 'yellow']\n        }]\n      };\n      options = {\n        legend: {\n          display: false\n        }\n      }; // * Average and Median Times\n\n      const averageTime = time => {\n        let average = time.reduce((a, b) => a + b);\n        return new Date(average / time.length).toISOString().substr(14, 8);\n      };\n\n      const medianTime = time => {\n        let index = Math.floor(time.length / 2);\n        let median; // * If the length % 2 === 0 (aka even number)\n\n        if (time.length % 2 === 0 && time.length !== 0) {\n          // * Minus one is needed for correct array index of even number centre points\n          median = (time[index - 1] + time[index]) / 2;\n        } else if (time.length % 2 === 1) {\n          median = time[index];\n        }\n\n        return new Date(median).toISOString().substr(14, 8);\n      };\n\n      const standardize_times = time => {\n        // * Ensures that all time strings given are in an appropriate ISO String format\n        if (time.length === 5) time = '00:' + time;\n        if (time.length === 7) time = '0' + time;\n        let milli = parseInt(time.split(':')[0] * 60000) + parseInt(time.split(':')[1].split('.')[0] * 1000) + parseInt(time.split('.')[1]) * 10;\n        return milli;\n      };\n\n      let times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n      average = averageTime(times);\n      median = medianTime(times);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, \"Data Insights\"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, \"Fastest Swim Meets\"), /*#__PURE__*/React.createElement(Pie, {\n      data: data,\n      height: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"The Average time is: \", average), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, \"The Median time is: \", median));\n  }\n\n}\n\nexport default Piechart;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js"],"names":["React","Component","Pie","Piechart","render","data","average","median","props","meetData","meets","map","meet","__EMPTY_12","mostMeetOccurences","list","Map","length","has","set","get","shift","meetName","Array","from","keys","meetNumber","values","labels","datasets","backgroundColor","options","legend","display","averageTime","time","reduce","a","b","Date","toISOString","substr","medianTime","index","Math","floor","standardize_times","milli","parseInt","split","times","__EMPTY_7"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2'\n\nclass Piechart extends Component {\n    // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n    render() {\n\n        let data;\n        let average;\n        let median;\n\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.meetData === null) {\n            return (\n                <div> </div>\n            )\n        } else {\n            // * For Pie Chart Graphing\n            let meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n            // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n            const mostMeetOccurences = (list) => {\n                let map = new Map();\n                while (list.length !== 0) {\n                    if (!map.has(list[0])) {\n                        map.set(list[0], 1);\n                    } else {\n                        map.set(list[0], map.get(list[0]) + 1);\n                    }\n                    list.shift();\n                }\n                let meetName = Array.from(map.keys())\n                let meetNumber = Array.from(map.values())\n                return { meetName, meetNumber }\n            }\n\n            let meetData = mostMeetOccurences(meets);\n            let meetName = meetData.meetName;\n            let meetNumber = meetData.meetNumber;\n\n            data = {\n                labels: meetName,\n                datasets: [{\n                    data: meetNumber,\n                    backgroundColor: ['red', 'yellow']\n                }]\n            }\n            options = {\n                legend: {\n                    display: false\n                }\n            }\n\n            // * Average and Median Times\n            const averageTime = (time) => {\n                let average = time.reduce((a, b) => a + b);\n                return new Date(average / time.length).toISOString().substr(14, 8);\n            }\n\n            const medianTime = (time) => {\n                let index = Math.floor(time.length / 2);\n                let median;\n                // * If the length % 2 === 0 (aka even number)\n                if (time.length % 2 === 0 && time.length !== 0) {\n                    // * Minus one is needed for correct array index of even number centre points\n                    median = (time[index - 1] + time[index]) / 2;\n                } else if (time.length % 2 === 1) {\n                    median = time[index];\n                }\n                return new Date(median).toISOString().substr(14, 8)\n            }\n\n            const standardize_times = (time) => {\n                // * Ensures that all time strings given are in an appropriate ISO String format\n                if (time.length === 5) time = '00:' + time;\n                if (time.length === 7) time = '0' + time;\n                let milli = ((parseInt(time.split(':')[0] * 60000)) + (parseInt(time.split(':')[1].split('.')[0] * 1000)) + (parseInt(time.split('.')[1]) * 10));\n                return milli;\n            }\n            let times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n            average = averageTime(times);\n            median = medianTime(times);\n        }\n\n        return (\n            <div>\n                <h2>Data Insights</h2>\n                {/* * Fastest Meets */}\n                <h4>Fastest Swim Meets</h4>\n                <Pie data={data} height={100} />\n                {/* Average, Median Times */}\n                <h4>The Average time is: {average}</h4>\n                <h4>The Median time is: {median}</h4>\n            </div>\n        )\n    }\n}\nexport default Piechart;"]},"metadata":{},"sourceType":"module"}