{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Dashboard extends Component {\n  render() {\n    let data;\n    let options; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.swimmerData == null) {\n      data = {\n        datasets: [{\n          label: ''\n        }]\n      };\n    } else {\n      data = {\n        labels: this.props.swimmerData.rank,\n        datasets: [{\n          //  TODO POTENTIALLY STYLE 1st,2nd,3rd Place to be coloured gold silver bronze to make finding the \n          label: 'WORKING',\n          backgroundColor: 'rgb(255, 99, 132)',\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: this.props.swimmerData.time\n        }]\n      };\n      options = {\n        responsive: true,\n        maintainAspectRatio: true,\n        title: {\n          text: this.props.eventName\n        },\n        animation: {\n          duration: 0 // general animation time\n\n        },\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time \n            label: (tooltipItem, data) => {\n              // * Label Array is used to create multiple labels inside of data element in graph. \n              let labelArr = [];\n              labelArr.push(this.props.swimmerData.athletes[tooltipItem.label - 1] + ' ' + tooltipItem.yLabel);\n              return labelArr;\n            }\n          }\n        },\n        scales: {\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Times\"\n            },\n            ticks: {\n              callback: function (v) {// Responsible for the time graphing for the y-axis (converts ms to a readable format)\n              }\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Rank\"\n            }\n          }]\n        }\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"Canadian Swimmings Power Rankings\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Dashboard for Chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }\n    }, \" \")));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/dashboard/dashboard.js"],"names":["React","Component","Line","Dashboard","render","data","options","props","swimmerData","datasets","label","labels","rank","backgroundColor","borderColor","fill","time","responsive","maintainAspectRatio","title","text","eventName","animation","duration","tooltips","callbacks","tooltipItem","labelArr","push","athletes","yLabel","scales","yAxes","scaleLabel","display","labelString","ticks","callback","v","xAxes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB;AAEA;;;;AAMA;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAE9BG,EAAAA,MAAM,GAAG;AACL,QAAIC,IAAJ;AACA,QAAIC,OAAJ,CAFK,CAGL;;AACA,QAAI,KAAKC,KAAL,CAAWC,WAAX,IAA0B,IAA9B,EAAoC;AAChCH,MAAAA,IAAI,GAAG;AACHI,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,KAAK,EAAE;AADX,SADM;AADP,OAAP;AAOH,KARD,MAQO;AACHL,MAAAA,IAAI,GAAG;AACHM,QAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWC,WAAX,CAAuBI,IAD5B;AAEHH,QAAAA,QAAQ,EAAE,CAAC;AACP;AACAC,UAAAA,KAAK,EAAE,SAFA;AAGPG,UAAAA,eAAe,EAAE,mBAHV;AAIPC,UAAAA,WAAW,EAAE,mBAJN;AAKPC,UAAAA,IAAI,EAAE,KALC;AAMPV,UAAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC,WAAX,CAAuBQ;AANtB,SAAD;AAFP,OAAP;AAYAV,MAAAA,OAAO,GAAG;AACNW,QAAAA,UAAU,EAAE,IADN;AAENC,QAAAA,mBAAmB,EAAE,IAFf;AAGNC,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE,KAAKb,KAAL,CAAWc;AADd,SAHD;AAMNC,QAAAA,SAAS,EAAE;AACPC,UAAAA,QAAQ,EAAE,CADH,CACK;;AADL,SANL;AASNC,QAAAA,QAAQ,EAAE;AACNC,UAAAA,SAAS,EAAE;AACP;AACAf,YAAAA,KAAK,EAAE,CAACgB,WAAD,EAAcrB,IAAd,KAAuB;AAC1B;AACA,kBAAIsB,QAAQ,GAAG,EAAf;AACAA,cAAAA,QAAQ,CAACC,IAAT,CAAc,KAAKrB,KAAL,CAAWC,WAAX,CAAuBqB,QAAvB,CAAgCH,WAAW,CAAChB,KAAZ,GAAoB,CAApD,IAAyD,GAAzD,GAA+DgB,WAAW,CAACI,MAAzF;AACA,qBAAOH,QAAP;AACH;AAPM;AADL,SATJ;AAoBNI,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,UAAU,EAAE;AACRC,cAAAA,OAAO,EAAE,IADD;AAERC,cAAAA,WAAW,EAAE;AAFL,aADR;AAKJC,YAAAA,KAAK,EAAE;AACHC,cAAAA,QAAQ,EAAE,UAAUC,CAAV,EAAa,CACnB;AACH;AAHE;AALH,WAAD,CADH;AAYJC,UAAAA,KAAK,EAAE,CAAC;AACJN,YAAAA,UAAU,EAAE;AACRC,cAAAA,OAAO,EAAE,IADD;AAERC,cAAAA,WAAW,EAAE;AAFL;AADR,WAAD;AAZH;AApBF,OAAV;AA0CH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CADJ,eAEI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE9B,IAAZ;AAAkB,MAAA,OAAO,EAAEC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CAFJ,CADJ;AAQH;;AA/E6B;;AAiFlC,eAAeH,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n\n\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Dashboard extends Component {\n\n    render() {\n        let data;\n        let options;\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.swimmerData == null) {\n            data = {\n                datasets: [\n                    {\n                        label: ''\n                    }\n                ]\n            }\n        } else {\n            data = {\n                labels: this.props.swimmerData.rank,\n                datasets: [{\n                    //  TODO POTENTIALLY STYLE 1st,2nd,3rd Place to be coloured gold silver bronze to make finding the \n                    label: 'WORKING',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: this.props.swimmerData.time,\n                }]\n            }\n\n            options = {\n                responsive: true,\n                maintainAspectRatio: true,\n                title: {\n                    text: this.props.eventName\n                },\n                animation: {\n                    duration: 0 // general animation time\n                },\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time \n                        label: (tooltipItem, data) => {\n                            // * Label Array is used to create multiple labels inside of data element in graph. \n                            let labelArr = [];\n                            labelArr.push(this.props.swimmerData.athletes[tooltipItem.label - 1] + ' ' + tooltipItem.yLabel);\n                            return labelArr;\n                        }\n                    }\n                },\n                scales: {\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Times\",\n                        },\n                        ticks: {\n                            callback: function (v) {\n                                // Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                            }\n                        }\n                    }],\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Rank\",\n                        }\n                    }]\n                }\n            }\n\n\n        }\n\n        return (\n            <div>\n                <div className=\"App\">Canadian Swimmings Power Rankings</div>\n                <div className=\"Dashboard for Chart\">\n                    <Line data={data} options={options}> </Line>\n                </div>\n            </div >\n        )\n    }\n}\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}