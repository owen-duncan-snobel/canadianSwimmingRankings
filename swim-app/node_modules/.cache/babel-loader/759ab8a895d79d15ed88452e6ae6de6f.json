{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js\";\nimport React, { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\n\nclass Piechart extends Component {\n  // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n  render() {\n    let data; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.meetData === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      // * For Pie Chart Graphing\n      let meets = this.props.meetData.map(meet => meet.__EMPTY_12); // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n\n      const mostMeetOccurences = list => {\n        let map = new Map();\n\n        while (list.length !== 0) {\n          if (!map.has(list[0])) {\n            map.set(list[0], 1);\n          } else {\n            map.set(list[0], map.get(list[0]) + 1);\n          }\n\n          list.shift();\n        }\n\n        let meetName = Array.from(map.keys());\n        let meetNumber = Array.from(map.values());\n        return {\n          meetName,\n          meetNumber\n        };\n      };\n\n      let meetData = mostMeetOccurences(meets);\n      let meetName = meetData.meetName;\n      let meetNumber = meetData.meetNumber;\n      data = {\n        labels: meetName,\n        datasets: [{\n          data: meetNumber,\n          backgroundColor: ['red', 'yellow']\n        }]\n      }; // * Average and Median Times\n\n      const averageTimes = times => {\n        let average = times.reduce((a, b) => a + b);\n        return average / times.length;\n      };\n\n      const medianTimes = times => {\n        let index = times.length / 2;\n        let median; // * If the length % 2 === 0 (aka even number)\n\n        if (times.length % 2 === 0 && items.length !== 0) {\n          median = (times[index] + times[index + 1]) / 2;\n        } else if (times.length % 2 === 1) {\n          median = time[index];\n        }\n\n        return median;\n      };\n\n      const standardize_times = time => {\n        // * Ensures that all time strings given are in an appropriate ISO String format\n        if (time.length === 5) time = '00:' + time;\n        if (time.length === 7) time = '0' + time;\n        let milli = parseInt(time.split(':')[0] * 60000) + parseInt(time.split(':')[1].split('.')[0] * 1000) + parseInt(time.split('.')[1]) * 10;\n        return milli;\n      };\n\n      let times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n      let average = averageTimes(times);\n      let median = medianTimes(times);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, \"Data Insights\"), /*#__PURE__*/React.createElement(Pie, {\n      data: data,\n      height: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Piechart;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js"],"names":["React","Component","Pie","Piechart","render","data","props","meetData","meets","map","meet","__EMPTY_12","mostMeetOccurences","list","Map","length","has","set","get","shift","meetName","Array","from","keys","meetNumber","values","labels","datasets","backgroundColor","averageTimes","times","average","reduce","a","b","medianTimes","index","median","items","time","standardize_times","milli","parseInt","split","__EMPTY_7"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2'\n\nclass Piechart extends Component {\n    // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n    render() {\n\n        let data;\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.meetData === null) {\n            return (\n                <div> </div>\n            )\n        } else {\n            // * For Pie Chart Graphing\n            let meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n            // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n            const mostMeetOccurences = (list) => {\n                let map = new Map();\n                while (list.length !== 0) {\n                    if (!map.has(list[0])) {\n                        map.set(list[0], 1);\n                    } else {\n                        map.set(list[0], map.get(list[0]) + 1);\n                    }\n                    list.shift();\n                }\n                let meetName = Array.from(map.keys())\n                let meetNumber = Array.from(map.values())\n                return { meetName, meetNumber }\n            }\n\n            let meetData = mostMeetOccurences(meets);\n            let meetName = meetData.meetName;\n            let meetNumber = meetData.meetNumber;\n\n            data = {\n                labels: meetName,\n                datasets: [{\n                    data: meetNumber,\n                    backgroundColor: ['red', 'yellow']\n                }]\n            }\n\n            // * Average and Median Times\n            const averageTimes = (times) => {\n                let average = times.reduce((a, b) => a + b);\n                return (average / times.length);\n            }\n\n            const medianTimes = (times) => {\n                let index = times.length / 2;\n                let median;\n                // * If the length % 2 === 0 (aka even number)\n                if (times.length % 2 === 0 && items.length !== 0) {\n                    median = (times[index] + times[index + 1]) / 2;\n                } else if (times.length % 2 === 1) {\n                    median = time[index];\n                }\n                return median;\n            }\n\n            const standardize_times = (time) => {\n                // * Ensures that all time strings given are in an appropriate ISO String format\n                if (time.length === 5) time = '00:' + time;\n                if (time.length === 7) time = '0' + time;\n                let milli = ((parseInt(time.split(':')[0] * 60000)) + (parseInt(time.split(':')[1].split('.')[0] * 1000)) + (parseInt(time.split('.')[1]) * 10));\n                return milli;\n            }\n            let times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n            let average = averageTimes(times);\n            let median = medianTimes(times);\n        }\n\n        return (\n            <div>\n                <h2>Data Insights</h2>\n                {/* * Fastest Meets */}\n                <Pie data={data} height={100} />\n                {/* Average, Median Times */}\n\n            </div>\n        )\n    }\n}\nexport default Piechart;"]},"metadata":{},"sourceType":"module"}