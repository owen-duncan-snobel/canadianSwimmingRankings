{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js\";\nimport React, { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Rainbow from 'rainbowvis.js';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\n\nclass Piechart extends Component {\n  // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n  render() {\n    let data;\n    let options;\n    let average;\n    let median;\n    let mode;\n    let times;\n    let meets;\n    let meetData;\n    let meetName;\n    let meetNumber;\n    let meetDate; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.meetData === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      // * Ensures that all time strings given are in an appropriate ISO String format\n      const standardize_times = time => {\n        if (time.length === 5) time = '00:' + time;\n        if (time.length === 7) time = '0' + time;\n        let milli = parseInt(time.split(':')[0] * 60000) + parseInt(time.split(':')[1].split('.')[0] * 1000) + parseInt(time.split('.')[1]) * 10;\n        return milli;\n      }; // * Converts The Time & Meet Data To an Array that can be easily used\n\n\n      times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n      meets = this.props.meetData.map(meet => meet.__EMPTY_12); // * Converts the Meet Data Map into useable 'key' and 'value' arrays for graphing\n\n      meetData = Array.from(SwimAnalytics.mostOccurences(meets)).sort((a, b) => a[1] - b[1]);\n      meetName = meetData.map(name => name[0]);\n      meetNumber = meetData.map(number => number[1]); // * Variables for the respective 'average' , 'median' and 'mode' from the data\n\n      average = SwimAnalytics.averageTime(times);\n      median = SwimAnalytics.medianTime(times);\n      mode = SwimAnalytics.modeTime(times); // * Converts Excel Date Value into a JS date inorder to be graphed\n\n      meetDate = this.props.meetData.map(date => new Date(Math.floor(date.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth()); // * Creates The Colors for the PieChart depending on how many distinct meets there are\n\n      let myRainbow = new Rainbow();\n      myRainbow.setSpectrum('#00aad8', '#ff6384');\n      myRainbow.setNumberRange(1, meetData.length);\n      let colorArray = [];\n\n      for (let i = 0; i < meetData.length; i++) {\n        colorArray.push('#' + myRainbow.colorAt(i));\n      }\n\n      console.log(colorArray);\n      data = {\n        labels: meetName,\n        datasets: [{\n          data: meetNumber,\n          backgroundColor: colorArray\n        }]\n      };\n      options = {\n        legend: {\n          display: false\n        }\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"style\", {\n      type: \"text/css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, `\n                    .analytics{\n                        height:auto;\n                        border-radius: 20px;\n                        padding-left: 1rem;\n                    } \n                    .modeCount{\n                        font-size: 0.8rem;\n                    }\n                `)), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"pt-0 analytics justify-content-md-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      className: \"colBorder m-1\",\n      lg: 12,\n      md: 5,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"formTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, \"Swimming Analytics\"), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"averageTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 52\n      }\n    }, \"Average Time \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 73\n      }\n    }), average), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"medianTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 50\n      }\n    }, \"Median Time\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 69\n      }\n    }), median), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"modeTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 49\n      }\n    }, \"Most Common Time Range \"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 80\n      }\n    }), this.props.meetData.length === 0 ? '' : new Date(mode.mostCommonNumber * 1000).toISOString().substr(14, 8) + '-' + new Date((mode.mostCommonNumber + 1) * 1000).toISOString().substr(14, 8), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 223\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"modeCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, \"  With \", mode.maxCount, \" Swimmers  \")), /*#__PURE__*/React.createElement(\"p\", {\n      name: \"modeMonth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 50\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      className: \"colBorder m-1\",\n      lg: 12,\n      md: 5,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \" formTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }, \"Fastest Meets\"), /*#__PURE__*/React.createElement(Pie, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default Piechart;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js"],"names":["React","Component","Pie","Container","Col","Row","Rainbow","SwimAnalytics","Piechart","render","data","options","average","median","mode","times","meets","meetData","meetName","meetNumber","meetDate","props","standardize_times","time","length","milli","parseInt","split","map","__EMPTY_7","meet","__EMPTY_12","Array","from","mostOccurences","sort","a","b","name","number","averageTime","medianTime","modeTime","date","Date","Math","floor","__EMPTY_10","getMonth","myRainbow","setSpectrum","setNumberRange","colorArray","i","push","colorAt","console","log","labels","datasets","backgroundColor","legend","display","mostCommonNumber","toISOString","substr","maxCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAO,KAAKC,aAAZ,MAA+B,6CAA/B;;AAEA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAC7B;AACAQ,EAAAA,MAAM,GAAG;AACL,QAAIC,IAAJ;AACA,QAAIC,OAAJ;AACA,QAAIC,OAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,IAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,UAAJ;AACA,QAAIC,QAAJ,CAXK,CAaL;;AACA,QAAI,KAAKC,KAAL,CAAWJ,QAAX,KAAwB,IAA5B,EAAkC;AAC9B,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAGH,KAJD,MAIO;AAEH;AACA,YAAMK,iBAAiB,GAAIC,IAAD,IAAU;AAEhC,YAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuBD,IAAI,GAAG,QAAQA,IAAf;AACvB,YAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuBD,IAAI,GAAG,MAAMA,IAAb;AACvB,YAAIE,KAAK,GAAKC,QAAQ,CAACH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgB,CAAhB,IAAqB,KAAtB,CAAT,GAA0CD,QAAQ,CAACH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgB,CAAhB,EAAmBA,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,IAAmC,IAApC,CAAlD,GAAgGD,QAAQ,CAACH,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAAR,GAA+B,EAA5I;AACA,eAAOF,KAAP;AACH,OAND,CAHG,CAWH;;;AACAV,MAAAA,KAAK,GAAG,KAAKM,KAAL,CAAWJ,QAAX,CAAoBW,GAApB,CAAwBL,IAAI,IAAID,iBAAiB,CAACC,IAAI,CAACM,SAAN,CAAjD,CAAR;AACAb,MAAAA,KAAK,GAAG,KAAKK,KAAL,CAAWJ,QAAX,CAAoBW,GAApB,CAAwBE,IAAI,IAAIA,IAAI,CAACC,UAArC,CAAR,CAbG,CAeH;;AACAd,MAAAA,QAAQ,GAAGe,KAAK,CAACC,IAAN,CAAW1B,aAAa,CAAC2B,cAAd,CAA6BlB,KAA7B,CAAX,EAAgDmB,IAAhD,CAAqD,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAvE,CAAX;AACAnB,MAAAA,QAAQ,GAAGD,QAAQ,CAACW,GAAT,CAAaU,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAzB,CAAX;AACAnB,MAAAA,UAAU,GAAGF,QAAQ,CAACW,GAAT,CAAaW,MAAM,IAAIA,MAAM,CAAC,CAAD,CAA7B,CAAb,CAlBG,CAoBH;;AACA3B,MAAAA,OAAO,GAAGL,aAAa,CAACiC,WAAd,CAA0BzB,KAA1B,CAAV;AACAF,MAAAA,MAAM,GAAGN,aAAa,CAACkC,UAAd,CAAyB1B,KAAzB,CAAT;AACAD,MAAAA,IAAI,GAAGP,aAAa,CAACmC,QAAd,CAAuB3B,KAAvB,CAAP,CAvBG,CAyBH;;AACAK,MAAAA,QAAQ,GAAG,KAAKC,KAAL,CAAWJ,QAAX,CAAoBW,GAApB,CAAwBe,IAAI,IAAI,IAAIC,IAAJ,CAASC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,UAAL,IAAmB,QAAQ,CAA3B,CAAX,IAA4C,KAA5C,GAAoD,IAA7D,EAAmEC,QAAnE,EAAhC,CAAX,CA1BG,CA4BH;;AACA,UAAIC,SAAS,GAAG,IAAI3C,OAAJ,EAAhB;AACA2C,MAAAA,SAAS,CAACC,WAAV,CAAsB,SAAtB,EAAiC,SAAjC;AACAD,MAAAA,SAAS,CAACE,cAAV,CAAyB,CAAzB,EAA4BlC,QAAQ,CAACO,MAArC;AACA,UAAI4B,UAAU,GAAG,EAAjB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,QAAQ,CAACO,MAA7B,EAAqC6B,CAAC,EAAtC,EAA0C;AACtCD,QAAAA,UAAU,CAACE,IAAX,CAAgB,MAAML,SAAS,CAACM,OAAV,CAAkBF,CAAlB,CAAtB;AACH;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAYL,UAAZ;AACA1C,MAAAA,IAAI,GAAG;AACHgD,QAAAA,MAAM,EAAExC,QADL;AAEHyC,QAAAA,QAAQ,EAAE,CAAC;AACPjD,UAAAA,IAAI,EAAES,UADC;AAEPyC,UAAAA,eAAe,EAAER;AAFV,SAAD;AAFP,OAAP;AAOAzC,MAAAA,OAAO,GAAG;AACNkD,QAAAA,MAAM,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL;AADF,OAAV;AAKH;;AAED,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,uDACI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;;;;;;;;;iBADN,CADJ,CADJ,eAkBI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,EAAE,EAAE,EAAnC;AAAuC,MAAA,EAAE,EAAE,CAA3C;AAA8C,MAAA,EAAE,EAAE,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFJ,eAII;AAAG,MAAA,IAAI,EAAC,aAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAvB,oBAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5C,EACKlD,OADL,CAJJ,eAQI;AAAG,MAAA,IAAI,EAAC,YAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAArB,oBAAwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxC,EACKC,MADL,CARJ,eAYI;AAAG,MAAA,IAAI,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAApB,oBAAmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnD,EACK,KAAKQ,KAAL,CAAWJ,QAAX,CAAoBO,MAApB,KAA+B,CAA/B,GAAmC,EAAnC,GAAwC,IAAIoB,IAAJ,CAAS9B,IAAI,CAACiD,gBAAL,GAAwB,IAAjC,EAAuCC,WAAvC,GAAqDC,MAArD,CAA4D,EAA5D,EAAgE,CAAhE,IAAqE,GAArE,GAA2E,IAAIrB,IAAJ,CAAS,CAAC9B,IAAI,CAACiD,gBAAL,GAAwB,CAAzB,IAA8B,IAAvC,EAA6CC,WAA7C,GAA2DC,MAA3D,CAAkE,EAAlE,EAAsE,CAAtE,CADxH,oBACkM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADlM,eAEI;AAAG,MAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAiCnD,IAAI,CAACoD,QAAtC,gBAFJ,CAZJ,eAiBI;AAAG,MAAA,IAAI,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,CAjBJ,CADJ,eAyBI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,EAAE,EAAE,EAAnC;AAAuC,MAAA,EAAE,EAAE,CAA3C;AAA8C,MAAA,EAAE,EAAE,EAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAExD,IAAX;AAAiB,MAAA,OAAO,EAAEC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAzBJ,CADJ,CAlBJ,CADJ;AAqDH;;AA7H4B;;AA+HjC,eAAeH,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2'\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Rainbow from 'rainbowvis.js'\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\n\nclass Piechart extends Component {\n    // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n    render() {\n        let data;\n        let options;\n        let average;\n        let median;\n        let mode;\n        let times;\n        let meets;\n        let meetData;\n        let meetName;\n        let meetNumber;\n        let meetDate;\n\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.meetData === null) {\n            return (\n                <div> </div>\n            )\n        } else {\n\n            // * Ensures that all time strings given are in an appropriate ISO String format\n            const standardize_times = (time) => {\n\n                if (time.length === 5) time = '00:' + time;\n                if (time.length === 7) time = '0' + time;\n                let milli = ((parseInt(time.split(':')[0] * 60000)) + (parseInt(time.split(':')[1].split('.')[0] * 1000)) + (parseInt(time.split('.')[1]) * 10));\n                return milli;\n            }\n\n            // * Converts The Time & Meet Data To an Array that can be easily used\n            times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n            meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n\n            // * Converts the Meet Data Map into useable 'key' and 'value' arrays for graphing\n            meetData = Array.from(SwimAnalytics.mostOccurences(meets)).sort((a, b) => a[1] - b[1]);\n            meetName = meetData.map(name => name[0]);\n            meetNumber = meetData.map(number => number[1]);\n\n            // * Variables for the respective 'average' , 'median' and 'mode' from the data\n            average = SwimAnalytics.averageTime(times);\n            median = SwimAnalytics.medianTime(times);\n            mode = SwimAnalytics.modeTime(times);\n\n            // * Converts Excel Date Value into a JS date inorder to be graphed\n            meetDate = this.props.meetData.map(date => new Date(Math.floor(date.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth());\n\n            // * Creates The Colors for the PieChart depending on how many distinct meets there are\n            let myRainbow = new Rainbow();\n            myRainbow.setSpectrum('#00aad8', '#ff6384')\n            myRainbow.setNumberRange(1, meetData.length);\n            let colorArray = [];\n\n            for (let i = 0; i < meetData.length; i++) {\n                colorArray.push('#' + myRainbow.colorAt(i));\n            }\n            console.log(colorArray)\n            data = {\n                labels: meetName,\n                datasets: [{\n                    data: meetNumber,\n                    backgroundColor: colorArray\n                }]\n            }\n            options = {\n                legend: {\n                    display: false\n                }\n            }\n        }\n\n        return (\n            <div>\n                <>\n                    <style type='text/css'>\n                        {`\n                    .analytics{\n                        height:auto;\n                        border-radius: 20px;\n                        padding-left: 1rem;\n                    } \n                    .modeCount{\n                        font-size: 0.8rem;\n                    }\n                `}\n                    </style>\n                </>\n\n\n                {/* Time Analytics */}\n                <Container>\n                    <Row className='pt-0 analytics justify-content-md-center'>\n                        <Col className='colBorder m-1' lg={12} md={5} xs={12}>\n\n                            <h4 className='formTitle'>Swimming Analytics</h4>\n                            {/* Average, Median Times, Mode Times */}\n                            <p name='averageTime'> <b>Average Time </b> <br></br>\n                                {average}\n                            </p>\n\n                            <p name='medianTime'><b>Median Time</b> <br></br>\n                                {median}\n                            </p>\n\n                            <p name='modeTime'> <b>Most Common Time Range </b> <br></br>\n                                {this.props.meetData.length === 0 ? '' : new Date(mode.mostCommonNumber * 1000).toISOString().substr(14, 8) + '-' + new Date((mode.mostCommonNumber + 1) * 1000).toISOString().substr(14, 8)} <br></br>\n                                <b className='modeCount'>  With {mode.maxCount} Swimmers  </b>\n                            </p>\n\n                            <p name='modeMonth'> <b></b>\n\n                            </p>\n\n                        </Col>\n\n                        {/* * Fastest Meets */}\n                        <Col className='colBorder m-1' lg={12} md={5} xs={12}>\n                            <h4 className=' formTitle'>Fastest Meets</h4>\n                            <Pie data={data} options={options} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div >\n        )\n    }\n}\nexport default Piechart;"]},"metadata":{},"sourceType":"module"}