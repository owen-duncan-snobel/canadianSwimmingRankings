{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js\";\nimport React, { Component } from 'react';\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Bar } from 'react-chartjs-2';\nimport Rainbow from '../../../node_modules/rainbowvis.js';\n\nclass PeakMonth extends Component {\n  render() {\n    let swimmerData = [];\n    let allSwimmerData = [];\n    let allSwimmerDataSubComponents = [];\n    let data = [];\n    let data2 = [];\n    let allData = [];\n    let options = [];\n    let options2 = [];\n\n    if (this.props.swimmerData == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        name: \"PeakMonth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      let allData = this.props.swimmerData; // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n\n      try {\n        allData.forEach(Workbook => {\n          // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n          let index = EVENTS.indexOf(this.props.event);\n          let Sheet = Workbook[0][index]; // * For the selected event collect all the swimmer data\n\n          Sheet.forEach(swimmer => {\n            swimmerData.push(swimmer);\n          });\n        });\n      } catch {\n        console.log('Error: Unable to convert workboot data into sheets');\n      } // * For gettign Data of the subcomponents that will add up to all events\n\n\n      allData.forEach(Workbook => {\n        let Sheet = Workbook[0];\n        Sheet.forEach(sheet => {\n          allSwimmerDataSubComponents.push(sheet);\n        });\n      }); // * For getting the Data of all sheets containing all events\n\n      allData.forEach(Workbook => {\n        let Sheet = Workbook[0];\n        Sheet.forEach(sheet => {\n          sheet.forEach(swimmer => {\n            allSwimmerData.push(swimmer);\n          });\n        });\n      });\n      let fiftyFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[0]);\n      let oneHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[1]);\n      let twoHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[2]);\n      let fourHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[3]);\n      let eightHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[4]);\n      let fifteenHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[5]);\n      let fiftyBk = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[6]);\n      let oneHundredBk = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[7]);\n      let twoHundredBk = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[8]);\n      let fiftyBr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[9]);\n      let oneHundredBr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[10]);\n      let twoHundredBr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[11]);\n      let fiftyBu = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[12]);\n      let oneHundredBu = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[13]);\n      let twoHundredBu = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[14]);\n      let oneHundredMe = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[15]);\n      let twoHundredMe = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[16]);\n      let fourHundredMe = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[17]);\n      let months = SwimAnalytics.peakDistribution(swimmerData);\n      let allMonths = SwimAnalytics.peakDistribution(allSwimmerData); // * Data that will be passed to the Linegraph Component\n\n      data = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: this.props.event,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: months\n        }]\n      }; // * Creates The Colors for the PieChart depending on how many distinct meets there are\n\n      let myRainbow = new Rainbow();\n      myRainbow.setSpectrum('#00aad8', '#ff6384');\n      myRainbow.setNumberRange(1, allSwimmerData.length);\n      let colorArray = [];\n\n      for (let i = 0; i < meetData.length; i++) {\n        colorArray.push('#' + myRainbow.colorAt(i));\n      }\n\n      data2 = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          stack: '2',\n          label: '50 Fr',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: fiftyFr\n        }, {\n          stack: '2',\n          label: '100 Fr',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: oneHundredFr\n        }, {\n          stack: '2',\n          label: 'All Events',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths[3]\n        }, {\n          stack: '2',\n          label: 'All Events',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }, {\n          stack: '2',\n          label: 'All Events',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }, {\n          stack: '2',\n          label: 'All Events',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }, {\n          stack: '2',\n          label: 'All Events',\n          backgroundColor: colorArray,\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }]\n      };\n      options = {\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time\n            label: (tooltipItem, d) => {\n              let labelArr = [];\n              labelArr.push('PLACE   SWIMMER   TIME'); // * Label Array is used to create multiple labels inside of data element in graph.\n\n              let index = tooltipItem.index + 8;\n\n              if (index > 11) {\n                index -= 12;\n              }\n\n              let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n              swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7));\n              return labelArr;\n            }\n          }\n        }\n      };\n      const barChartData = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: 'Active',\n          backgroundColor: '#a88add',\n          stack: '2',\n          data: fiftyFr\n        }, {\n          label: 'Banned',\n          backgroundColor: '#0cc2aa',\n          stack: '2',\n          data: oneHundredFr\n        }]\n      };\n      const options2 = {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            stacked: true\n          }],\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }; //console.log(SwimAnalytics.mostOccurences(data));\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }\n      }, this.props.event + ' Month Of Best Times', \" \")), /*#__PURE__*/React.createElement(Bar, {\n        data: data,\n        options: options,\n        height: 75,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Bar, {\n        data: data2,\n        option: options2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nexport default PeakMonth;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js"],"names":["React","Component","EVENTS","SwimAnalytics","Bar","Rainbow","PeakMonth","render","swimmerData","allSwimmerData","allSwimmerDataSubComponents","data","data2","allData","options","options2","props","forEach","Workbook","index","indexOf","event","Sheet","swimmer","push","console","log","sheet","fiftyFr","peakDistribution","oneHundredFr","twoHundredFr","fourHundredFr","eightHundredFr","fifteenHundredFr","fiftyBk","oneHundredBk","twoHundredBk","fiftyBr","oneHundredBr","twoHundredBr","fiftyBu","oneHundredBu","twoHundredBu","oneHundredMe","twoHundredMe","fourHundredMe","months","allMonths","labels","datasets","label","backgroundColor","pointBackgroundColor","borderColor","fill","myRainbow","setSpectrum","setNumberRange","length","colorArray","i","meetData","colorAt","stack","tooltips","callbacks","tooltipItem","d","labelArr","swimmers","filter","el","Date","Math","floor","__EMPTY_10","getMonth","__EMPTY_9","__EMPTY_3","__EMPTY_7","barChartData","legend","display","scales","xAxes","stacked","yAxes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Bar } from 'react-chartjs-2';\nimport Rainbow from '../../../node_modules/rainbowvis.js';\n\nclass PeakMonth extends Component {\n    render() {\n        let swimmerData = [];\n        let allSwimmerData = [];\n        let allSwimmerDataSubComponents = [];\n        let data = [];\n        let data2 = [];\n        let allData = [];\n        let options = [];\n        let options2 = [];\n\n        if (this.props.swimmerData == null) {\n            return (\n                <div name=\"PeakMonth\"> </div>\n            )\n        } else {\n\n            let allData = this.props.swimmerData;\n\n            // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n            try {\n                allData.forEach(Workbook => {\n                    // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n                    let index = EVENTS.indexOf(this.props.event)\n                    let Sheet = Workbook[0][index];\n                    // * For the selected event collect all the swimmer data\n                    Sheet.forEach(swimmer => {\n                        swimmerData.push(swimmer);\n                    })\n                })\n            } catch {\n                console.log('Error: Unable to convert workboot data into sheets');\n            }\n            // * For gettign Data of the subcomponents that will add up to all events\n            allData.forEach(Workbook => {\n                let Sheet = Workbook[0];\n                Sheet.forEach(sheet => {\n                    allSwimmerDataSubComponents.push(sheet)\n                })\n            })\n\n            // * For getting the Data of all sheets containing all events\n            allData.forEach(Workbook => {\n                let Sheet = Workbook[0];\n                Sheet.forEach(sheet => {\n                    sheet.forEach(swimmer => {\n                        allSwimmerData.push(swimmer)\n                    })\n                })\n            })\n\n            let fiftyFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[0]);\n            let oneHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[1]);\n            let twoHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[2]);\n            let fourHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[3]);\n            let eightHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[4]);\n            let fifteenHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[5]);\n            let fiftyBk = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[6]);\n            let oneHundredBk = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[7]);\n            let twoHundredBk = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[8]);\n            let fiftyBr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[9]);\n            let oneHundredBr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[10]);\n            let twoHundredBr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[11]);\n            let fiftyBu = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[12]);\n            let oneHundredBu = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[13]);\n            let twoHundredBu = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[14]);\n            let oneHundredMe = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[15]);\n            let twoHundredMe = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[16]);\n            let fourHundredMe = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[17]);\n\n            let months = SwimAnalytics.peakDistribution(swimmerData);\n            let allMonths = SwimAnalytics.peakDistribution(allSwimmerData);\n\n            // * Data that will be passed to the Linegraph Component\n            data = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    label: this.props.event,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: months,\n                }]\n            }\n\n            // * Creates The Colors for the PieChart depending on how many distinct meets there are\n            let myRainbow = new Rainbow();\n            myRainbow.setSpectrum('#00aad8', '#ff6384')\n            myRainbow.setNumberRange(1, allSwimmerData.length);\n            let colorArray = [];\n\n            for (let i = 0; i < meetData.length; i++) {\n                colorArray.push('#' + myRainbow.colorAt(i));\n            }\n            data2 = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    stack: '2',\n                    label: '50 Fr',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: fiftyFr,\n                },\n                {\n                    stack: '2',\n                    label: '100 Fr',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: oneHundredFr,\n                }\n                    ,\n                {\n                    stack: '2',\n                    label: 'All Events',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths[3],\n                }\n                    ,\n                {\n                    stack: '2',\n                    label: 'All Events',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                {\n                    stack: '2',\n                    label: 'All Events',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                {\n                    stack: '2',\n                    label: 'All Events',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                {\n                    stack: '2',\n                    label: 'All Events',\n                    backgroundColor: colorArray,\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                ]\n            }\n\n            options = {\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time\n                        label: (tooltipItem, d) => {\n                            let labelArr = [];\n                            labelArr.push('PLACE   SWIMMER   TIME')\n                            // * Label Array is used to create multiple labels inside of data element in graph.\n                            let index = tooltipItem.index + 8;\n                            if (index > 11) {\n                                index -= 12;\n                            }\n                            let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n                            swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7))\n                            return labelArr;\n                        }\n                    }\n                },\n            }\n\n            const barChartData = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [\n                    {\n                        label: 'Active',\n                        backgroundColor: '#a88add',\n                        stack: '2',\n                        data: fiftyFr,\n                    },\n                    {\n                        label: 'Banned',\n                        backgroundColor: '#0cc2aa',\n                        stack: '2',\n                        data: oneHundredFr,\n                    },\n                ],\n            };\n\n            const options2 = {\n                legend: {\n                    display: false,\n                },\n                scales: {\n                    xAxes: [\n                        {\n                            stacked: true,\n                        },\n                    ],\n                    yAxes: [\n                        {\n                            stacked: true,\n                        },\n                    ],\n                },\n            };\n\n            //console.log(SwimAnalytics.mostOccurences(data));\n            return (\n                <div>\n                    <div>\n                        <h4 className=\"text-center\">{this.props.event + ' Month Of Best Times'} </h4>\n                    </div>\n                    <Bar data={data} options={options} height={75} />\n                    <Bar data={data2} option={options2} />\n                </div >\n            )\n        }\n    }\n}\nexport default PeakMonth;"]},"metadata":{},"sourceType":"module"}