{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js\";\nimport React, { Component } from 'react';\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Bar } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n  render() {\n    let swimmerData = [];\n    let allSwimmerData = [];\n    let data = [];\n    let allData = [];\n    let options = [];\n\n    if (this.props.swimmerData == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        name: \"PeakMonth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      let allData = this.props.swimmerData; // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n\n      allData.forEach(Workbook => {\n        // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n        let index = EVENTS.indexOf(this.props.event);\n        let Sheet = Workbook[0][index]; // * For the selected event collect all the swimmer data\n\n        Sheet.forEach(swimmer => {\n          swimmerData.push(swimmer);\n        });\n      });\n      allData.forEach(Workbook => {\n        let Sheet = Workbook[0];\n        Sheet.forEach(sheet => {\n          sheet.forEach(swimmer => {\n            allSwimmerData.push(swimmer);\n          });\n        });\n      });\n      console.log(allSwimmerData);\n      let months = SwimAnalytics.peakDistribution(swimmerData);\n      let allMonths = SwimAnalytics.peakDistribution(allSwimmerData);\n      console.log(allMonths); // * Data that will be passed to the Linegraph Component\n\n      let data = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: this.props.event,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: months\n        }]\n      };\n      let data2 = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: 'All Events',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }]\n      };\n      options = {\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time \n            label: (tooltipItem, d) => {\n              let labelArr = [];\n              labelArr.push('PLACE   SWIMMER   TIME'); // * Label Array is used to create multiple labels inside of data element in graph. \n\n              let index = tooltipItem.index + 8;\n\n              if (index > 11) {\n                index -= 12;\n              }\n\n              let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n              swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7));\n              return labelArr;\n            }\n          }\n        }\n      }; //console.log(SwimAnalytics.mostOccurences(data));\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }, this.props.event + ' Month of best time', \" \")), /*#__PURE__*/React.createElement(Bar, {\n        data: data,\n        options: options,\n        height: 75,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Bar, {\n        data: data2,\n        option: '',\n        height: 75,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nexport default PeakMonth;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js"],"names":["React","Component","EVENTS","SwimAnalytics","Bar","PeakMonth","render","swimmerData","allSwimmerData","data","allData","options","props","forEach","Workbook","index","indexOf","event","Sheet","swimmer","push","sheet","console","log","months","peakDistribution","allMonths","labels","datasets","label","backgroundColor","pointBackgroundColor","borderColor","fill","data2","tooltips","callbacks","tooltipItem","d","labelArr","swimmers","filter","el","Date","Math","floor","__EMPTY_10","getMonth","__EMPTY_9","__EMPTY_3","__EMPTY_7"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Bar } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n    render() {\n        let swimmerData = [];\n        let allSwimmerData = [];\n        let data = [];\n        let allData = [];\n        let options = [];\n        if (this.props.swimmerData == null) {\n            return (\n                <div name=\"PeakMonth\"> </div>\n            )\n        } else {\n\n            let allData = this.props.swimmerData;\n\n            // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n            allData.forEach(Workbook => {\n                // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n                let index = EVENTS.indexOf(this.props.event)\n                let Sheet = Workbook[0][index];\n                // * For the selected event collect all the swimmer data\n                Sheet.forEach(swimmer => {\n                    swimmerData.push(swimmer);\n                })\n            })\n\n            allData.forEach(Workbook => {\n                let Sheet = Workbook[0];\n                Sheet.forEach(sheet => {\n                    sheet.forEach(swimmer => {\n                        allSwimmerData.push(swimmer)\n                    })\n                })\n            })\n            console.log(allSwimmerData)\n\n            let months = SwimAnalytics.peakDistribution(swimmerData);\n            let allMonths = SwimAnalytics.peakDistribution(allSwimmerData);\n\n            console.log(allMonths)\n            // * Data that will be passed to the Linegraph Component\n            let data = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    label: this.props.event,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: months,\n                }]\n            }\n\n            let data2 = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    label: 'All Events',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }]\n            }\n\n            options = {\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time \n                        label: (tooltipItem, d) => {\n                            let labelArr = [];\n                            labelArr.push('PLACE   SWIMMER   TIME')\n                            // * Label Array is used to create multiple labels inside of data element in graph. \n                            let index = tooltipItem.index + 8;\n                            if (index > 11) {\n                                index -= 12;\n                            }\n                            let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n                            swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7))\n                            return labelArr;\n                        }\n                    }\n                }\n            }\n\n\n\n            //console.log(SwimAnalytics.mostOccurences(data));\n            return (\n                <div>\n                    <div>\n                        <h4 className=\"text-center\">{this.props.event + ' Month of best time'} </h4>\n                    </div>\n                    <Bar data={data} options={options} height={75} />\n                    <Bar data={data2} option={''} height={75} />\n                </div >\n            )\n        }\n    }\n}\nexport default PeakMonth;"]},"metadata":{},"sourceType":"module"}