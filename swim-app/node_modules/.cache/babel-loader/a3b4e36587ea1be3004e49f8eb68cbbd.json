{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/dashboard/dashboard.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Table from 'react-bootstrap/Table';\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Dashboard extends Component {\n  renderTableData() {\n    if (this.state.tableData === null) {\n      return 'working';\n    }\n\n    return this.state.tableData.map(swimmer => {\n      console.log(swimmer);\n      const {\n        gender,\n        distance,\n        stroke,\n        fullname,\n        birthdate,\n        nation,\n        clubcode,\n        swimtime,\n        swimtime_N,\n        place,\n        meetdate,\n        meetcity,\n        meetname,\n        clubname\n      } = swimmer;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: fullname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }\n      }, gender), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }\n      }, distance), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }\n      }, stroke), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }\n      }, fullname), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }\n      }, birthdate), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }\n      }, nation), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }\n      }, clubcode), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }\n      }, swimtime), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      }, place), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }\n      }, meetdate), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }\n      }, meetcity), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }\n      }, meetname), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }\n      }, clubname));\n    });\n  }\n\n  render() {\n    let data;\n    let options; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.swimmerData == null) {\n      data = {\n        datasets: [{\n          label: ''\n        }]\n      };\n    } else {\n      data = {\n        labels: this.props.swimmerData.rank,\n        datasets: [{\n          //  TODO POTENTIALLY STYLE 1st,2nd,3rd Place to be coloured gold silver bronze to make finding the \n          label: this.props.swimEvent,\n          backgroundColor: 'rgb(255, 99, 132)',\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: this.props.swimmerData.time\n        }]\n      };\n      options = {\n        responsive: true,\n        maintainAspectRatio: true,\n        animation: {\n          duration: 0 // general animation time\n\n        },\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time \n            label: (tooltipItem, data) => {\n              // * Label Array is used to create multiple labels inside of data element in graph. \n              let labelArr = [];\n              labelArr.push(this.props.swimmerData.athletes[tooltipItem.label - 1] + ' ' + new Date(tooltipItem.yLabel).toISOString().substr(14, 8));\n              return labelArr;\n            }\n          }\n        },\n        scales: {\n          yAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Times (Seconds)\"\n            },\n            ticks: {\n              callback: function (v) {\n                //* Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                return new Date(v).toISOString().substr(14, 8);\n              }\n            }\n          }],\n          xAxes: [{\n            scaleLabel: {\n              display: true,\n              labelString: \"Rank\"\n            }\n          }]\n        }\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, \"Canadian Swimming Rankings\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Dashboard for Chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, \" \")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, this.renderTableData()))));\n  }\n\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/dashboard/dashboard.js"],"names":["React","Component","Line","Table","Dashboard","renderTableData","state","tableData","map","swimmer","console","log","gender","distance","stroke","fullname","birthdate","nation","clubcode","swimtime","swimtime_N","place","meetdate","meetcity","meetname","clubname","render","data","options","props","swimmerData","datasets","label","labels","rank","swimEvent","backgroundColor","borderColor","fill","time","responsive","maintainAspectRatio","animation","duration","tooltips","callbacks","tooltipItem","labelArr","push","athletes","Date","yLabel","toISOString","substr","scales","yAxes","scaleLabel","display","labelString","ticks","callback","v","xAxes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Table from 'react-bootstrap/Table'\n/**\n *   The dashboard is responsible for housing the Chart and styling for the chart\n *   it also will pass the chart back to the main app.\n */\n\n\n// TODO NEED TO RECREATE THE TABLE THAT IS USED ON THE MAIN PAGE FOR THE SELECTION OF DATA TO GRAB THE LINK FROM\n\nclass Dashboard extends Component {\n    renderTableData() {\n        if (this.state.tableData === null) {\n            return ('working');\n        }\n        return this.state.tableData.map((swimmer) => {\n            console.log(swimmer)\n            const { gender, distance, stroke, fullname, birthdate, nation, clubcode, swimtime, swimtime_N, place, meetdate, meetcity, meetname, clubname } = swimmer\n            return (\n                <tr key={fullname}>\n                    <td>{gender}</td>\n                    <td>{distance}</td>\n                    <td>{stroke}</td>\n                    <td>{fullname}</td>\n                    <td>{birthdate}</td>\n                    <td>{nation}</td>\n                    <td>{clubcode}</td>\n                    <td>{swimtime}</td>\n                    <td>{place}</td>\n                    <td>{meetdate}</td>\n                    <td>{meetcity}</td>\n                    <td>{meetname}</td>\n                    <td>{clubname}</td>\n                </tr>\n            )\n        })\n    }\n    render() {\n        let data;\n        let options;\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.swimmerData == null) {\n            data = {\n                datasets: [\n                    {\n                        label: ''\n                    }\n                ]\n            }\n        } else {\n            data = {\n                labels: this.props.swimmerData.rank,\n                datasets: [{\n                    //  TODO POTENTIALLY STYLE 1st,2nd,3rd Place to be coloured gold silver bronze to make finding the \n                    label: this.props.swimEvent,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: this.props.swimmerData.time,\n                }]\n            }\n\n            options = {\n                responsive: true,\n                maintainAspectRatio: true,\n                animation: {\n                    duration: 0 // general animation time\n                },\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time \n                        label: (tooltipItem, data) => {\n                            // * Label Array is used to create multiple labels inside of data element in graph. \n                            let labelArr = [];\n                            labelArr.push(this.props.swimmerData.athletes[tooltipItem.label - 1] + ' ' + new Date(tooltipItem.yLabel).toISOString().substr(14, 8));\n                            return labelArr;\n                        }\n                    }\n                },\n                scales: {\n                    yAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Times (Seconds)\",\n                        },\n                        ticks: {\n                            callback: function (v) {\n                                //* Responsible for the time graphing for the y-axis (converts ms to a readable format)\n                                return new Date(v).toISOString().substr(14, 8)\n                            }\n                        }\n                    }],\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Rank\",\n                        }\n                    }]\n                }\n            }\n\n\n        }\n\n        return (\n            <div>\n                <div className=\"App\">Canadian Swimming Rankings</div>\n                <div className=\"Dashboard for Chart\">\n                    <Line data={data} options={options}> </Line>\n                </div>\n\n                <div>\n                    <Table>\n                        <thead>\n\n                        </thead>\n                        <tbody>\n                            {this.renderTableData()}\n                        </tbody>\n                    </Table>\n                </div>\n            </div >\n        )\n    }\n}\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}