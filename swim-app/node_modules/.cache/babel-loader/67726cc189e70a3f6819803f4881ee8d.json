{"ast":null,"code":"// * Finds the element in an Array returns a Map (key,value) of the number of occurences of each distinctive element \nexport const mostOccurences = list => {\n  let map = new Map();\n\n  while (list.length !== 0) {\n    if (!map.has(list[0])) {\n      map.set(list[0], 1);\n    } else {\n      map.set(list[0], map.get(list[0]) + 1);\n    }\n\n    list.shift();\n  }\n\n  return map;\n}; // * Converts time stored exceldate timeformat into a specific month\n\nexport const meetMonth = meets => {\n  try {\n    return meets.map(date => new Date(Math.floor(date.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth());\n  } catch {\n    console.log('Error: Unable to map the array');\n    return;\n  }\n};\nexport const peakDistribution = data => {\n  // * Data for most common meet occurence month\n  let months = Array(12).fill(0);\n  let meets = mostOccurences(meetMonth(data));\n  meets.forEach((value, key) => {\n    months[key] = value;\n  }); // * Shifts the Months so that is graphed about September-August\n\n  for (let i = 0; i < 4; i++) {\n    months.unshift(months.pop());\n  }\n\n  return months;\n}; // * Average and Median Times\n\nexport const averageTime = time => {\n  try {\n    let average = time.reduce((a, b) => a + b);\n    return new Date(average / time.length).toISOString().substr(14, 8);\n  } catch {\n    console.log('Error: Empty Data Array');\n  }\n};\nexport const medianTime = time => {\n  try {\n    let index = Math.floor(time.length / 2);\n    let median; // * If the length % 2 === 0 (aka even number)\n\n    if (time.length % 2 === 0 && time.length !== 0) {\n      // * Minus one is needed for correct array index of even number centre points\n      median = (time[index - 1] + time[index]) / 2;\n    } else if (time.length % 2 === 1) {\n      median = time[index];\n    }\n\n    return new Date(median).toISOString().substr(14, 8);\n  } catch {\n    console.log('Error: Empty Data Array');\n  }\n};\nexport const modeTime = time => {\n  try {\n    // * Times is given in Milliseconds, and from lowest to highest. We will convert to seconds and round down to standardize mode to seconds\n    let toModeSeconds = time.map(el => Math.floor(el / 1000));\n    let modeOccurence = mostOccurences(toModeSeconds); // * Iterates through the map and finds the most occuring time\n\n    let mostCommonNumber = NaN;\n    let maxCount = -1;\n\n    for (let [num, count] of modeOccurence.entries()) {\n      if (count > maxCount) {\n        maxCount = count;\n        mostCommonNumber = num;\n      }\n    }\n\n    return {\n      mostCommonNumber,\n      maxCount\n    };\n  } catch {\n    console.log('Error: Empty Data Array');\n  }\n};","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/constants/swimAnalytics/swimAnalytics.js"],"names":["mostOccurences","list","map","Map","length","has","set","get","shift","meetMonth","meets","date","Date","Math","floor","__EMPTY_10","getMonth","console","log","peakDistribution","data","months","Array","fill","forEach","value","key","i","unshift","pop","averageTime","time","average","reduce","a","b","toISOString","substr","medianTime","index","median","modeTime","toModeSeconds","el","modeOccurence","mostCommonNumber","NaN","maxCount","num","count","entries"],"mappings":"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","sourcesContent":["// * Finds the element in an Array returns a Map (key,value) of the number of occurences of each distinctive element \nexport const mostOccurences = (list) => {\n    let map = new Map();\n    while (list.length !== 0) {\n        if (!map.has(list[0])) {\n            map.set(list[0], 1);\n        } else {\n            map.set(list[0], map.get(list[0]) + 1);\n        }\n        list.shift();\n    }\n    return map;\n};\n\n// * Converts time stored exceldate timeformat into a specific month\nexport const meetMonth = (meets) => {\n    try {\n        return meets.map(date => new Date(Math.floor(date.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth());\n    } catch {\n        console.log('Error: Unable to map the array')\n        return;\n    }\n}\n\nexport const peakDistribution = (data) => {\n    // * Data for most common meet occurence month\n    let months = Array(12).fill(0);\n    let meets = mostOccurences(meetMonth(data));\n    meets.forEach((value, key) => {\n        months[key] = value\n    });\n\n    // * Shifts the Months so that is graphed about September-August\n    for (let i = 0; i < 4; i++) {\n        months.unshift(months.pop());\n    }\n    return months;\n}\n\n// * Average and Median Times\nexport const averageTime = (time) => {\n    try {\n        let average = time.reduce((a, b) => a + b);\n        return new Date(average / time.length).toISOString().substr(14, 8);\n    }\n    catch {\n        console.log('Error: Empty Data Array')\n    }\n}\n\nexport const medianTime = (time) => {\n    try {\n        let index = Math.floor(time.length / 2);\n        let median;\n        // * If the length % 2 === 0 (aka even number)\n        if (time.length % 2 === 0 && time.length !== 0) {\n            // * Minus one is needed for correct array index of even number centre points\n            median = (time[index - 1] + time[index]) / 2;\n        } else if (time.length % 2 === 1) {\n            median = time[index];\n        }\n        return new Date(median).toISOString().substr(14, 8)\n    } catch {\n        console.log('Error: Empty Data Array')\n    }\n}\n\nexport const modeTime = (time) => {\n    try {\n        // * Times is given in Milliseconds, and from lowest to highest. We will convert to seconds and round down to standardize mode to seconds\n        let toModeSeconds = time.map(el => Math.floor(el / 1000));\n        let modeOccurence = mostOccurences(toModeSeconds);\n\n        // * Iterates through the map and finds the most occuring time\n        let mostCommonNumber = NaN\n        let maxCount = -1\n        for (let [num, count] of modeOccurence.entries()) {\n            if (count > maxCount) {\n                maxCount = count\n                mostCommonNumber = num\n            }\n        }\n        return { mostCommonNumber, maxCount };\n    } catch {\n        console.log('Error: Empty Data Array')\n    }\n}"]},"metadata":{},"sourceType":"module"}