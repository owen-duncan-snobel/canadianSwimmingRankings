{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js\";\nimport React, { Component } from 'react';\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Bar } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n  render() {\n    let swimmerData = [];\n    let allSwimmerData = [];\n    let allSwimmerDataSubComponents = [];\n    let data = [];\n    let data2 = [];\n    let allData = [];\n    let options = [];\n    let options2 = [];\n\n    if (this.props.swimmerData == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        name: \"PeakMonth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      let allData = this.props.swimmerData; // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n\n      try {\n        allData.forEach(Workbook => {\n          // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n          let index = EVENTS.indexOf(this.props.event);\n          let Sheet = Workbook[0][index]; // * For the selected event collect all the swimmer data\n\n          Sheet.forEach(swimmer => {\n            swimmerData.push(swimmer);\n          });\n        });\n      } catch {\n        console.log('Error: Unable to convert workboot data into sheets');\n      } // * For gettign Data of the subcomponents that will add up to all events\n\n\n      allData.forEach(Workbook => {\n        let Sheet = Workbook[0];\n        Sheet.forEach(sheet => {\n          allSwimmerDataSubComponents.push(sheet);\n        });\n      }); // * For getting the Data of all sheets containing all events\n\n      allData.forEach(Workbook => {\n        let Sheet = Workbook[0];\n        Sheet.forEach(sheet => {\n          sheet.forEach(swimmer => {\n            allSwimmerData.push(swimmer);\n          });\n        });\n      });\n      let fiftyFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[0]);\n      let oneHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[1]);\n      /*\n      let twoHundredFr\n      let fourHundredFr\n      let eightHundredFr\n      let fifteenHundredFr\n      let 50mBk\n      let oneHundredBk\n      let twoHundredBk\n      let 50mBr\n      let oneHundredBr\n      let twoHundredBr\n      let 50mBu\n      let oneHundredBu\n      let twoHundredBu\n      let 100Me\n      let twoHundredMe\n      let fourHundredMe\n      */\n\n      let months = SwimAnalytics.peakDistribution(swimmerData);\n      let allMonths = SwimAnalytics.peakDistribution(allSwimmerData); // * Data that will be passed to the Linegraph Component\n\n      data = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: this.props.event,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: months\n        }]\n      };\n      data2 = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: '50 Fr',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: fiftyFr\n        }, {\n          label: '100 Fr',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: oneHundredFr\n        }, {\n          label: 'All Events',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths[3]\n        }, {\n          label: 'All Events',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }, {\n          label: 'All Events',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }, {\n          label: 'All Events',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }, {\n          label: 'All Events',\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: allMonths\n        }]\n      };\n      options = {\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time\n            label: (tooltipItem, d) => {\n              let labelArr = [];\n              labelArr.push('PLACE   SWIMMER   TIME'); // * Label Array is used to create multiple labels inside of data element in graph.\n\n              let index = tooltipItem.index + 8;\n\n              if (index > 11) {\n                index -= 12;\n              }\n\n              let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n              swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7));\n              return labelArr;\n            }\n          }\n        }\n      };\n      let type = {\n        type: 'bar'\n      };\n      options2 = {\n        scales: {\n          xAxes: [{\n            stacked: true,\n            gridLines: {\n              display: false\n            }\n          }],\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }; //console.log(SwimAnalytics.mostOccurences(data));\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }\n      }, this.props.event + ' Month Of Best Times', \" \")), /*#__PURE__*/React.createElement(Bar, {\n        data: data,\n        options: options,\n        height: 75,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Bar, {\n        data: data2,\n        option: options2,\n        type: type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nexport default PeakMonth;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js"],"names":["React","Component","EVENTS","SwimAnalytics","Bar","PeakMonth","render","swimmerData","allSwimmerData","allSwimmerDataSubComponents","data","data2","allData","options","options2","props","forEach","Workbook","index","indexOf","event","Sheet","swimmer","push","console","log","sheet","fiftyFr","peakDistribution","oneHundredFr","months","allMonths","labels","datasets","label","backgroundColor","pointBackgroundColor","borderColor","fill","tooltips","callbacks","tooltipItem","d","labelArr","swimmers","filter","el","Date","Math","floor","__EMPTY_10","getMonth","__EMPTY_9","__EMPTY_3","__EMPTY_7","type","scales","xAxes","stacked","gridLines","display","yAxes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Bar } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n    render() {\n        let swimmerData = [];\n        let allSwimmerData = [];\n        let allSwimmerDataSubComponents = [];\n        let data = [];\n        let data2 = [];\n        let allData = [];\n        let options = [];\n        let options2 = [];\n\n        if (this.props.swimmerData == null) {\n            return (\n                <div name=\"PeakMonth\"> </div>\n            )\n        } else {\n\n            let allData = this.props.swimmerData;\n\n            // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n            try {\n                allData.forEach(Workbook => {\n                    // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n                    let index = EVENTS.indexOf(this.props.event)\n                    let Sheet = Workbook[0][index];\n                    // * For the selected event collect all the swimmer data\n                    Sheet.forEach(swimmer => {\n                        swimmerData.push(swimmer);\n                    })\n                })\n            } catch {\n                console.log('Error: Unable to convert workboot data into sheets');\n            }\n            // * For gettign Data of the subcomponents that will add up to all events\n            allData.forEach(Workbook => {\n                let Sheet = Workbook[0];\n                Sheet.forEach(sheet => {\n                    allSwimmerDataSubComponents.push(sheet)\n                })\n            })\n\n            // * For getting the Data of all sheets containing all events\n            allData.forEach(Workbook => {\n                let Sheet = Workbook[0];\n                Sheet.forEach(sheet => {\n                    sheet.forEach(swimmer => {\n                        allSwimmerData.push(swimmer)\n                    })\n                })\n            })\n\n            let fiftyFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[0]);\n            let oneHundredFr = SwimAnalytics.peakDistribution(allSwimmerDataSubComponents[1]);\n            /*\n      let twoHundredFr\n      let fourHundredFr\n      let eightHundredFr\n      let fifteenHundredFr\n      let 50mBk\n      let oneHundredBk\n      let twoHundredBk\n      let 50mBr\n      let oneHundredBr\n      let twoHundredBr\n      let 50mBu\n      let oneHundredBu\n      let twoHundredBu\n      let 100Me\n      let twoHundredMe\n      let fourHundredMe\n      */\n            let months = SwimAnalytics.peakDistribution(swimmerData);\n            let allMonths = SwimAnalytics.peakDistribution(allSwimmerData);\n\n            // * Data that will be passed to the Linegraph Component\n            data = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    label: this.props.event,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: months,\n                }]\n            }\n\n            data2 = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    label: '50 Fr',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: fiftyFr,\n                },\n                {\n                    label: '100 Fr',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: oneHundredFr,\n                }\n                    ,\n                {\n                    label: 'All Events',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths[3],\n                }\n                    ,\n                {\n                    label: 'All Events',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                {\n                    label: 'All Events',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                {\n                    label: 'All Events',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                {\n                    label: 'All Events',\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: allMonths,\n                }\n                    ,\n                ]\n            }\n\n            options = {\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time\n                        label: (tooltipItem, d) => {\n                            let labelArr = [];\n                            labelArr.push('PLACE   SWIMMER   TIME')\n                            // * Label Array is used to create multiple labels inside of data element in graph.\n                            let index = tooltipItem.index + 8;\n                            if (index > 11) {\n                                index -= 12;\n                            }\n                            let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n                            swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7))\n                            return labelArr;\n                        }\n                    }\n                },\n            }\n            let type = {\n                type: 'bar'\n            }\n            options2 = {\n                scales: {\n                    xAxes: [{\n                        stacked: true,\n                        gridLines: { display: false },\n                    }],\n                    yAxes: [{\n                        stacked: true,\n                    }],\n                }\n            }\n            //console.log(SwimAnalytics.mostOccurences(data));\n            return (\n                <div>\n                    <div>\n                        <h4 className=\"text-center\">{this.props.event + ' Month Of Best Times'} </h4>\n                    </div>\n                    <Bar data={data} options={options} height={75} />\n                    <Bar data={data2} option={options2} type={type} />\n                </div >\n            )\n        }\n    }\n}\nexport default PeakMonth;"]},"metadata":{},"sourceType":"module"}