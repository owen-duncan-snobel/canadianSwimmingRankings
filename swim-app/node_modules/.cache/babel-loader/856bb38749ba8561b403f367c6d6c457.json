{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js\";\nimport React, { Component } from 'react';\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Line } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n  render() {\n    let swimmerData = [];\n    let data = [];\n    let options = [];\n\n    if (this.props.swimmerData == null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        name: \"PeakMonth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      let allData = this.props.swimmerData; // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n\n      allData.forEach(Workbook => {\n        // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n        let index = EVENTS.indexOf(this.props.event);\n        let Sheet = Workbook[0][index]; // * For the selected event collect all the swimmer data\n\n        Sheet.forEach(swimmer => {\n          swimmerData.push(swimmer);\n        });\n      }); // * Data for most common meet occurence month\n\n      let months = Array(12).fill(0);\n      let meets = SwimAnalytics.mostOccurences(SwimAnalytics.meetMonth(swimmerData));\n      meets.forEach((value, key) => {\n        months[key] = value;\n      }); // * Shifts the Months so that is graphed about September-August\n\n      for (let i = 0; i < 4; i++) {\n        months.unshift(months.pop());\n      } // * Data that will be passed to the Linegraph Component\n\n\n      let data = {\n        labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'],\n        datasets: [{\n          label: this.props.swimEvent,\n          backgroundColor: 'rgb(255, 99, 132)',\n          pointBackgroundColor: ['rgb(255, 99, 132)'],\n          borderColor: 'rgb(255, 99, 132)',\n          fill: false,\n          data: months\n        }]\n      };\n      options = {\n        tooltips: {\n          callbacks: {\n            // * Updates the Tooltips (Graph Points) with the Name,Time \n            label: (tooltipItem, d) => {\n              let labelArr = []; // * Label Array is used to create multiple labels inside of data element in graph. \n\n              let index = tooltipItem.index + 8;\n\n              if (index > 11) {\n                index -= 12;\n              }\n\n              let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n              swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7));\n              return labelArr;\n            }\n          }\n        }\n      }; //console.log(SwimAnalytics.mostOccurences(data));\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Line, {\n        data: data,\n        options: options,\n        height: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }));\n    }\n  }\n\n}\n\nexport default PeakMonth;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/peakMonth/peakMonth.js"],"names":["React","Component","EVENTS","SwimAnalytics","Line","PeakMonth","render","swimmerData","data","options","props","allData","forEach","Workbook","index","indexOf","event","Sheet","swimmer","push","months","Array","fill","meets","mostOccurences","meetMonth","value","key","i","unshift","pop","labels","datasets","label","swimEvent","backgroundColor","pointBackgroundColor","borderColor","tooltips","callbacks","tooltipItem","d","labelArr","swimmers","filter","el","Date","Math","floor","__EMPTY_10","getMonth","__EMPTY_9","__EMPTY_3","__EMPTY_7"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { EVENTS } from '../../constants/swimming/swimming';\nimport * as SwimAnalytics from '../../constants/swimAnalytics/swimAnalytics';\nimport { Line } from 'react-chartjs-2';\n\nclass PeakMonth extends Component {\n    render() {\n        let swimmerData = [];\n        let data = [];\n        let options = [];\n        if (this.props.swimmerData == null) {\n            return (\n                <div name=\"PeakMonth\"> </div>\n            )\n        } else {\n\n            let allData = this.props.swimmerData;\n\n            // * Need to process data from Workbook -> Worksheets -> Event -> Swimmers\n            allData.forEach(Workbook => {\n                // * In every Workbook (Age / Year) it holds Sheets with the Events, will select the sheet that contains the events data\n                let index = EVENTS.indexOf(this.props.event)\n                let Sheet = Workbook[0][index];\n                // * For the selected event collect all the swimmer data\n                Sheet.forEach(swimmer => {\n                    swimmerData.push(swimmer);\n                })\n            })\n\n            // * Data for most common meet occurence month\n            let months = Array(12).fill(0);\n            let meets = SwimAnalytics.mostOccurences(SwimAnalytics.meetMonth(swimmerData));\n            meets.forEach((value, key) => {\n                months[key] = value\n            });\n\n            // * Shifts the Months so that is graphed about September-August\n            for (let i = 0; i < 4; i++) {\n                months.unshift(months.pop());\n            }\n\n            // * Data that will be passed to the Linegraph Component\n            let data = {\n                labels: ['September', 'October', 'November', 'December', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',],\n                datasets: [{\n                    label: this.props.swimEvent,\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    pointBackgroundColor: ['rgb(255, 99, 132)'],\n                    borderColor: 'rgb(255, 99, 132)',\n                    fill: false,\n                    data: months,\n                }]\n            }\n\n            options = {\n                tooltips: {\n                    callbacks: {\n                        // * Updates the Tooltips (Graph Points) with the Name,Time \n                        label: (tooltipItem, d) => {\n                            let labelArr = [];\n\n                            // * Label Array is used to create multiple labels inside of data element in graph. \n                            let index = tooltipItem.index + 8;\n                            if (index > 11) {\n                                index -= 12;\n                            }\n                            let swimmers = swimmerData.filter(el => new Date(Math.floor(el.__EMPTY_10 - (25567 + 2)) * 86400 * 1000).getMonth() == index);\n                            swimmers.forEach(el => labelArr.push(el.__EMPTY_9 + ' ' + el.__EMPTY_3 + ' ' + el.__EMPTY_7))\n                            return labelArr;\n                        }\n                    }\n                }\n            }\n\n            //console.log(SwimAnalytics.mostOccurences(data));\n            return (\n                <div>\n                    <Line data={data} options={options} height={100} />\n                </div >\n            )\n        }\n    }\n}\nexport default PeakMonth;"]},"metadata":{},"sourceType":"module"}