{"ast":null,"code":"var _jsxFileName = \"/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js\";\nimport React, { Component } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nclass Piechart extends Component {\n  // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n  render() {\n    let data;\n    let options;\n    let average;\n    let median;\n    let mode; // * If no data has been passed down from the form or invalid display empty form\n\n    if (this.props.meetData === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }\n      }, \" \");\n    } else {\n      // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n      const mostOccurences = list => {\n        let map = new Map();\n\n        while (list.length !== 0) {\n          if (!map.has(list[0])) {\n            map.set(list[0], 1);\n          } else {\n            map.set(list[0], map.get(list[0]) + 1);\n          }\n\n          list.shift();\n        }\n\n        let meetName = Array.from(map.keys());\n        let meetNumber = Array.from(map.values());\n        return {\n          meetName,\n          meetNumber\n        };\n      };\n\n      let meetData = mostOccurences(meets);\n      let meetName = meetData.meetName;\n      let meetNumber = meetData.meetNumber; // * Average and Median Times\n\n      const averageTime = time => {\n        let average = time.reduce((a, b) => a + b);\n        return new Date(average / time.length).toISOString().substr(14, 8);\n      };\n\n      const medianTime = time => {\n        let index = Math.floor(time.length / 2);\n        let median; // * If the length % 2 === 0 (aka even number)\n\n        if (time.length % 2 === 0 && time.length !== 0) {\n          // * Minus one is needed for correct array index of even number centre points\n          median = (time[index - 1] + time[index]) / 2;\n        } else if (time.length % 2 === 1) {\n          median = time[index];\n        }\n\n        return new Date(median).toISOString().substr(14, 8);\n      };\n\n      const modeTime = time => {\n        // * Times is given in Milliseconds, and from lowest to highest. We will convert to seconds and round down to standardize mode to seconds\n        let toModeSeconds = time.map(el => Math.floor(el / 1000));\n        return mostOccurences(toModeSeconds);\n      };\n\n      const standardize_times = time => {\n        // * Ensures that all time strings given are in an appropriate ISO String format\n        if (time.length === 5) time = '00:' + time;\n        if (time.length === 7) time = '0' + time;\n        let milli = parseInt(time.split(':')[0] * 60000) + parseInt(time.split(':')[1].split('.')[0] * 1000) + parseInt(time.split('.')[1]) * 10;\n        return milli;\n      };\n\n      data = {\n        labels: meetName,\n        datasets: [{\n          data: meetNumber,\n          backgroundColor: ['red', 'yellow']\n        }]\n      };\n      options = {\n        legend: {\n          display: false\n        }\n      };\n      let times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n      let meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n      average = averageTime(times);\n      median = medianTime(times);\n      mode = modeTime(times);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"mt-5 mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      name: \"averageTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \"The Average time is: \", average), /*#__PURE__*/React.createElement(\"h6\", {\n      name: \"medianTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, \"The Median time is: \", median), /*#__PURE__*/React.createElement(\"h6\", {\n      name: \"modeTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    }, \"Most swimmers fall within \", mode, \"  \"), /*#__PURE__*/React.createElement(\"h6\", {\n      name: \"selectedTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, this.props.swimmerName ? this.props.swimmerName.split(',').reverse().join(' ') : '', \" \", this.props.swimmerTime))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }\n    }, \"Fastest Swim Meets:\"), /*#__PURE__*/React.createElement(Pie, {\n      data: data,\n      options: options,\n      height: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nexport default Piechart;","map":{"version":3,"sources":["/Users/owen/Desktop/Selenium_Scraping_Js/SwimCanada/Puppeteer_Scraping_SwimCanada/swim-app/src/components/piechart/piechart.js"],"names":["React","Component","Pie","Container","Col","Row","Piechart","render","data","options","average","median","mode","props","meetData","mostOccurences","list","map","Map","length","has","set","get","shift","meetName","Array","from","keys","meetNumber","values","meets","averageTime","time","reduce","a","b","Date","toISOString","substr","medianTime","index","Math","floor","modeTime","toModeSeconds","el","standardize_times","milli","parseInt","split","labels","datasets","backgroundColor","legend","display","times","__EMPTY_7","meet","__EMPTY_12","swimmerName","reverse","join","swimmerTime"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Pie } from 'react-chartjs-2'\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nclass Piechart extends Component {\n    // * Props can be deconstructed from meetData: {meetData (Meet Names), meetNumber (Array of number of occ. of each meet)}\n    render() {\n\n        let data;\n        let options;\n        let average;\n        let median;\n        let mode;\n\n        // * If no data has been passed down from the form or invalid display empty form\n        if (this.props.meetData === null) {\n            return (\n                <div> </div>\n            )\n        } else {\n\n            // * Finds the Swim Meet with the most occurences of best times from the top 50 Swimmers\n            const mostOccurences = (list) => {\n                let map = new Map();\n                while (list.length !== 0) {\n                    if (!map.has(list[0])) {\n                        map.set(list[0], 1);\n                    } else {\n                        map.set(list[0], map.get(list[0]) + 1);\n                    }\n                    list.shift();\n                }\n                let meetName = Array.from(map.keys())\n                let meetNumber = Array.from(map.values())\n                return { meetName, meetNumber }\n            }\n\n            let meetData = mostOccurences(meets);\n            let meetName = meetData.meetName;\n            let meetNumber = meetData.meetNumber;\n\n            // * Average and Median Times\n            const averageTime = (time) => {\n                let average = time.reduce((a, b) => a + b);\n                return new Date(average / time.length).toISOString().substr(14, 8);\n            }\n\n            const medianTime = (time) => {\n                let index = Math.floor(time.length / 2);\n                let median;\n                // * If the length % 2 === 0 (aka even number)\n                if (time.length % 2 === 0 && time.length !== 0) {\n                    // * Minus one is needed for correct array index of even number centre points\n                    median = (time[index - 1] + time[index]) / 2;\n                } else if (time.length % 2 === 1) {\n                    median = time[index];\n                }\n                return new Date(median).toISOString().substr(14, 8)\n            }\n\n\n            const modeTime = (time) => {\n                // * Times is given in Milliseconds, and from lowest to highest. We will convert to seconds and round down to standardize mode to seconds\n                let toModeSeconds = time.map(el => Math.floor(el / 1000));\n                return mostOccurences(toModeSeconds);\n            }\n\n            const standardize_times = (time) => {\n                // * Ensures that all time strings given are in an appropriate ISO String format\n                if (time.length === 5) time = '00:' + time;\n                if (time.length === 7) time = '0' + time;\n                let milli = ((parseInt(time.split(':')[0] * 60000)) + (parseInt(time.split(':')[1].split('.')[0] * 1000)) + (parseInt(time.split('.')[1]) * 10));\n                return milli;\n            }\n\n            data = {\n                labels: meetName,\n                datasets: [{\n                    data: meetNumber,\n                    backgroundColor: ['red', 'yellow']\n                }]\n            }\n            options = {\n                legend: {\n                    display: false\n                }\n            }\n\n            let times = this.props.meetData.map(time => standardize_times(time.__EMPTY_7));\n            let meets = this.props.meetData.map(meet => meet.__EMPTY_12);\n\n            average = averageTime(times);\n            median = medianTime(times);\n            mode = modeTime(times);\n\n        }\n\n        return (\n            <div>\n                <Container>\n                    <Row className='mt-5 mb-5'>\n                        <Col>\n                            {/* Average, Median Times, Mode Times */}\n                            <h6 name=\"averageTime\">The Average time is: {average}</h6>\n                            <h6 name=\"medianTime\">The Median time is: {median}</h6>\n                            <h6 name=\"modeTime\">Most swimmers fall within {mode}  </h6>\n                            <h6 name=\"selectedTime\">{this.props.swimmerName ? this.props.swimmerName.split(',').reverse().join(' ') : ''} {this.props.swimmerTime}</h6>\n\n                        </Col>\n                    </Row>\n                    {/* * Fastest Meets */}\n                    {/**\n                 *  TODO NEED to go back and add a table listing the fastest meets might be easier to view\n                 */}\n                    <Row>\n                        <Col>\n                            <h4>Fastest Swim Meets:</h4>\n                            <Pie data={data} options={options} height={100} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Piechart;"]},"metadata":{},"sourceType":"module"}